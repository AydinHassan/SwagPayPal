{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./helper/dom-access.helper.js","webpack:///./helper/iterator.helper.js","webpack:///./utility/form/form-serialize.util.js","webpack:///./utility/loading-indicator/element-loading-indicator.util.js","webpack:///./helper/string.helper.js","webpack:///./helper/emitter.helper.js","webpack:///./plugin-system/plugin.class.js","webpack:///./service/http-client.service.js","webpack:////app/custom/plugins/SwagPayPal/src/Resources/storefront/express-checkout-button/swag-paypal.express-checkout.js","webpack:////app/custom/plugins/SwagPayPal/src/Resources/storefront/smart-payment-buttons/swag-paypal.smart-payment-buttons.js","webpack:////app/custom/plugins/SwagPayPal/src/Resources/storefront/paypal-selector/paypal-selector.js","webpack:////app/custom/plugins/SwagPayPal/src/Resources/storefront/plus/payment-wall.js","webpack:////app/custom/plugins/SwagPayPal/src/Resources/storefront/main.js","webpack:////app/platform/src/Storefront/Resources/node_modules/deepmerge/dist/umd.js","webpack:///./utility/loading-indicator/loading-indicator.util.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DomAccess","element","Node","_typeof","isObject","isNumber","nodeType","isString","nodeName","RootNode","document","window","attribute","isNode","Error","hasAttribute","strict","arguments","length","undefined","concat","getAttribute","keyWithoutData","replace","parsedKey","StringHelper","toLowerCamelCase","dataset","parsePrimitive","parentNode","selector","querySelector","elements","querySelectorAll","Iterator","source","callback","Map","forEach","Array","isArray","FormData","keys","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","entries","iterator","next","done","entry","err","return","FormSerializeUtil","form","formData","serialize","json","iterate","ElementLoadingIndicatorUtil","LoadingIndicatorUtil","el","classList","add","exists","appendLoader","setTimeout","loader","remove","insertAdjacentHTML","getTemplate","string","charAt","toUpperCase","slice","toLowerCase","separator","upperCamelCase","toUpperCamelCase","lcFirst","split","map","ucFirst","join","test","JSON","parse","e","toString","NativeEventEmitter","_classCallCheck","this","_el","$emitter","_listeners","eventName","detail","event","CustomEvent","dispatchEvent","opts","emitter","splitEventName","cb","scope","once","onceCallback","unsubscribe","addEventListener","listeners","push","_this","reduce","accumulator","listener","sort","removeEventListener","_this2","Plugin","options","pluginName","_pluginName","_getPluginName","_mergeOptions","_initialized","_registerInstance","_init","init","update","dashedPluginName","toDashCase","dataAttributeConfig","getDataAttribute","dataAttributeOptions","merge","constructor","PluginConfigManager","console","error","message","deepmerge","all","config","PluginManager","getPluginInstancesFromElement","set","getPlugin","HttpClient","accessKey","contextToken","_request","_accessKey","_contextToken","url","contentType","request","_createPreparedRequest","_registerOnLoaded","send","data","_getContentType","abort","responseText","type","XMLHttpRequest","open","setRequestHeader","SwagPayPalExpressCheckoutButtonInstances","isInjectionTriggered","SwagPayPalExpressCheckoutButton","_client","paypal","createButton","head","contains","paypalScriptLoadedClass","renderButton","createScript","instance","scriptOptions","getScriptUrlOptions","payPalScriptUrl","useSandbox","clientId","payPalScript","createElement","src","appendChild","Buttons","getButtonConfig","render","style","size","buttonSize","shape","buttonShape","color","buttonColor","tagline","layout","label","height","createOrder","onApprove","addProductToCart","then","_createOrder","_this3","Promise","resolve","response","token","_this4","formattedLineItems","_formatLineItems","post","stringify","serializeJson","parentElement","matches","match","_defineProperty","lineItems","offCanvasCloseButton","requestPayload","paymentId","paymentID","click","body","location","languageIso","commit","currency","intent","loginEnabled","SwagPayPalSmartPaymentButtons","toggleButtons","paymentMethodId","getElementById","display","targetNode","MutationObserver","observe","attributes","childList","subtree","onClick","actions","checkValidity","reject","payerId","payerID","submit","PayPalSelector","selectPaymentMethodPayPal","paypalRadioButton","paypalPaymentMethodId","checked","SwagPayPalPlusPaymentWall","selectedPaymentMethodRadio","onConfirmCheckout","createPaymentWall","loaded","PAYPAL","paymentWall","apps","PPP","placeholder","approvalUrl","country","customerCountryIso","buttonLocation","language","customerSelectedLanguage","useraction","userAction","surcharging","showLoadingIndicator","showPuiOnSandbox","onLoad","enableContinue","onEnableContinue","getSelectedPaymentMethodId","clearPaymentSelection","deselectPaymentMethod","paypalRadio","setAttribute","Event","preventDefault","target","afterCreateOrder","orderId","id","params","isPayPalPlusEnabled","paypalPaymentId","afterPayOrder","paymentUrl","doCheckout","preSelection","register","isMergeableObject","isNonNullObject","stringValue","$$typeof","REACT_ELEMENT_TYPE","isReactElement","isSpecial","for","cloneUnlessOtherwiseSpecified","clone","val","defaultArrayMerge","mergeObject","destination","customMerge","getMergeFunction","arrayMerge","sourceIsArray","targetIsArray","sourceAndTargetTypesMatch","array","prev","factory","parent","position","Element","_getPosition","indicators","indicator"],"mappings":"aACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,aAIAlC,IAAAmC,EAAA,geChFqBC,qLAQHC,GACV,IAAKA,EAAS,OAAO,EAErB,GAAoB,YAAhB,oBAAOC,KAAP,YAAAC,EAAOD,OACP,OAAOD,aAAmBC,KAG9B,IAAME,EAA8B,WAAnBD,EAAOF,GAClBI,EAAuC,iBAArBJ,EAAQK,SAC1BC,EAAuC,iBAArBN,EAAQO,SAG1BC,EAAWR,IAAYS,UAAYT,IAAYU,OAErD,OAAOV,IAHUG,GAAYC,GAAYE,GAGVE,wCAQfR,EAASW,GACzB,IAAKZ,EAAUa,OAAOZ,GAClB,MAAM,IAAIa,MAAM,0CAGpB,MAAoC,mBAAzBb,EAAQc,cAEZd,EAAQc,aAAaH,wCAUZX,EAASW,GAA0B,IAAfI,IAAeC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACnD,GAAID,IAAyD,IAA/ChB,EAAUe,aAAad,EAASW,GAC1C,MAAM,IAAIE,MAAJ,0BAAAM,OAAoCR,EAApC,sBAGV,GAAoC,mBAAzBX,EAAQoB,aAQnB,OAAOpB,EAAQoB,aAAaT,GAPxB,GAAII,EACA,MAAM,IAAIF,MAAM,iGAiBJb,EAASV,GAAoB,IAAfyB,IAAeC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAC3CK,EAAiB/B,EAAIgC,QAAQ,YAAa,IAC1CC,EAAYC,IAAaC,iBAAiBJ,EAAgB,KAChE,GAAKtB,EAAUa,OAAOZ,GAAtB,CAQA,QAA+B,IAApBA,EAAQ0B,QAAnB,CAQA,IAAMf,EAAYX,EAAQ0B,QAAQH,GAElC,QAAyB,IAAdZ,EAA2B,CAClC,GAAII,EACA,MAAM,IAAIF,MAAJ,gCAAAM,OAA0C7B,EAA1C,wBAAA6B,OAAoEnB,EAApE,MAGV,OAAOW,EAGX,OAAOa,IAAaG,eAAehB,GAjB/B,GAAII,EACA,MAAM,IAAIF,MAAM,yDATpB,GAAIE,EACA,MAAM,IAAIF,MAAM,mFAkCPe,EAAYC,GAAyB,IAAfd,IAAeC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACtD,GAAID,IAAWhB,EAAUa,OAAOgB,GAC5B,MAAM,IAAIf,MAAM,6CAGpB,IAAMb,EAAU4B,EAAWE,cAAcD,KAAa,EAEtD,GAAId,IAAsB,IAAZf,EACV,MAAM,IAAIa,MAAJ,yBAAAM,OAAmCU,EAAnC,qCAGV,OAAO7B,2CAWa4B,EAAYC,GAAyB,IAAfd,IAAeC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACzD,GAAID,IAAWhB,EAAUa,OAAOgB,GAC5B,MAAM,IAAIf,MAAM,6CAGpB,IAAIkB,EAAWH,EAAWI,iBAAiBH,GAK3C,GAJwB,IAApBE,EAASd,SACTc,GAAW,GAGXhB,IAAuB,IAAbgB,EACV,MAAM,IAAIlB,MAAJ,yBAAAM,OAAmCU,EAAnC,iCAGV,OAAOE,8fCpJME,sLAiBFC,EAAQC,GACnB,GAAID,aAAkBE,IAClB,OAAOF,EAAOG,QAAQF,GAG1B,GAAIG,MAAMC,QAAQL,GACd,OAAOA,EAAOG,QAAQF,GAG1B,KAAID,aAAkBM,UAAtB,CAOA,GAAIN,aAAkBzD,OAClB,OAAOA,OAAOgE,KAAKP,GAAQG,QAAQ,SAAA/C,GAC/B6C,EAASD,EAAO5C,GAAMA,KAI9B,MAAM,IAAIuB,MAAJ,oBAAAM,OAAAjB,EAAqCgC,GAArC,sBAb0B,IAAAQ,GAAA,EAAAC,GAAA,EAAAC,OAAA1B,EAAA,IAC5B,QAAA2B,EAAAC,EAAiBZ,EAAOa,UAAxBjE,OAAAkE,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAmC,KAA3BS,EAA2BN,EAAA7D,MAC/BmD,EAASgB,EAAM,GAAIA,EAAM,KAFD,MAAAC,GAAAT,GAAA,EAAAC,EAAAQ,EAAA,YAAAV,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,uSCrBnBU,wLAUAC,GAAqB,IAAfxC,IAAeC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAElC,GAAsB,SAAlBuC,EAAKhD,SAAqB,CAC1B,GAAIQ,EACA,MAAM,IAAIF,MAAM,qCAGpB,MAAO,GAGX,OAAO,IAAI2B,SAASe,yCAYHA,GAAqB,IAAfxC,IAAeC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAChCwC,EAAWF,EAAkBG,UAAUF,EAAMxC,GACnD,GAAIyC,IAAa,GAAI,OAAOA,EAC5B,IAAME,EAAO,GAIb,OAFAzB,IAAS0B,QAAQH,EAAU,SAACxE,EAAOM,GAAR,OAAgBoE,EAAKpE,GAAON,IAEhD0E,k6BC1Cf,IAEqBE,gaAAoCC,4CAOvCC,GACVA,EAAGC,UAAUC,IAAI,sBACbJ,EAA4BK,OAAOH,KACvCF,EAA4BM,aAAaJ,GACzCK,WAAW,WACP,IAAMC,EAASN,EAAGhC,cAAH,IAAAX,OAdE,4BAeZiD,GAILA,EAAOL,UAAUC,IAAI,iCACtB,mCAQOF,GACVA,EAAGC,UAAUM,OAAO,sBACpB,IAAMD,EAASN,EAAGhC,cAAH,IAAAX,OA9BM,4BA+BhBiD,GAILA,EAAOC,wCAUGP,GACV,OAAQA,EAAG9B,iBAAH,IAAAb,OA9Ca,4BA8CmCF,OAAS,wCAUjE,+BAAAE,OAxDqB,0BAwDrB,kMAcgB2C,GAChBA,EAAGQ,mBAAmB,YAAaV,EAA4BW,uSCzElD/C,sLAUFgD,GACX,OAAOA,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,MAAM,mCAW1CH,GACX,OAAOA,EAAOC,OAAO,GAAGG,cAAgBJ,EAAOG,MAAM,sCAUvCH,GACd,OAAOA,EAAOlD,QAAQ,WAAY,OAAOA,QAAQ,KAAM,IAAIsD,uDAUvCJ,EAAQK,GAC5B,IAAMC,EAAiBtD,EAAauD,iBAAiBP,EAAQK,GAC7D,OAAOrD,EAAawD,QAAQF,4CAURN,EAAQK,GAC5B,OAAKA,EAIeL,EAAOS,MAAMJ,GACdK,IAAI,SAAAV,GAAM,OAAIhD,EAAa2D,QAAQX,EAAOI,iBAAgBQ,KAAK,IAJvE5D,EAAa2D,QAAQX,EAAOI,sDAcrB5F,GAClB,IAOI,MAJI,gBAAgBqG,KAAKrG,KACrBA,EAAQA,EAAMsC,QAAQ,IAAK,MAGxBgE,KAAKC,MAAMvG,GAEtB,MAAOwG,GACH,OAAOxG,EAAMyG,oSCnFJC,aAkCjB,SAAAA,IAA2B,IAAf5B,EAAe9C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAVP,sGAAUkF,CAAAC,KAAAF,GACvBE,KAAKC,IAAM/B,EACXA,EAAGgC,SAAWF,KACdA,KAAKG,WAAa,0DAQdC,GAAwB,IAAbC,EAAajF,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAClBkF,EAAQ,IAAIC,YAAYH,EAAW,CACrCC,WAGJL,KAAK9B,GAAGsC,cAAcF,qCAUhBF,EAAW7D,GAAqB,IAAXkE,EAAWrF,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAC5BsF,EAAUV,KACVW,EAAiBP,EAAUf,MAAM,KACnCuB,EAAKH,EAAKI,MAAQtE,EAAS5C,KAAK8G,EAAKI,OAAStE,EAGlD,GAAIkE,EAAKK,OAAsB,IAAdL,EAAKK,KAAe,CACjC,IAAMC,EAAeH,EACrBA,EAAK,SAAsBN,GACvBI,EAAQM,YAAYZ,GACpBW,EAAaT,IAYrB,OARAN,KAAK9B,GAAG+C,iBAAiBN,EAAe,GAAIC,GAE5CZ,KAAKkB,UAAUC,KAAK,CAChBR,iBACAF,OACAG,QAGG,sCAQCR,GAAW,IAAAgB,EAAApB,KACbW,EAAiBP,EAAUf,MAAM,KAavC,OAZAW,KAAKkB,UAAYlB,KAAKkB,UAAUG,OAAO,SAACC,EAAaC,GAGjD,OAFmBA,EAASZ,eAAea,OAAO3B,aAAec,EAAea,OAAO3B,YAGnFuB,EAAKlD,GAAGuD,oBAAoBF,EAASZ,eAAe,GAAIY,EAASX,IAC1DU,IAGXA,EAAYH,KAAKI,GACVD,IACR,KAEI,kCAQH,IAAAI,EAAA1B,KAQJ,OANAA,KAAKkB,UAAUzE,QAAQ,SAAC8E,GACpBG,EAAKxD,GAAGuD,oBAAoBF,EAASZ,eAAe,GAAIY,EAASX,MAIrEZ,KAAKkB,UAAY,IACV,6BAIP,OAAOlB,KAAKC,kBAGT7G,GACH4G,KAAKC,IAAM7G,oCAIX,OAAO4G,KAAKG,yBAGF/G,GACV4G,KAAKG,WAAa/G,4TChILuI,aAQjB,SAAAA,EAAYzD,GAAsC,IAAlC0D,EAAkCxG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAxB,GAAIyG,EAAoBzG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAC9C,+FAD8C2E,CAAAC,KAAA2B,IACzCxH,IAAUa,OAAOkD,GAClB,MAAM,IAAIjD,MAAM,oCAGpB+E,KAAK9B,GAAKA,EACV8B,KAAKE,SAAW,IAAIJ,IAAmBE,KAAK9B,IAC5C8B,KAAK8B,YAAc9B,KAAK+B,eAAeF,GACvC7B,KAAK4B,QAAU5B,KAAKgC,cAAcJ,GAClC5B,KAAKiC,cAAe,EAEpBjC,KAAKkC,oBACLlC,KAAKmC,8DAOL,MAAM,IAAIlH,MAAJ,qCAAAM,OAA+CyE,KAAK8B,YAApD,wFAkBF9B,KAAKiC,eAETjC,KAAKoC,OACLpC,KAAKiC,cAAe,qCAWfjC,KAAKiC,cAEVjC,KAAKqC,+CAUKT,GACV,IAAMU,EAAmB1G,IAAa2G,WAAWvC,KAAK8B,aAChDU,EAAsBrI,IAAUsI,iBAAiBzC,KAAK9B,GAAhC,QAAA3C,OAA4C+G,EAA5C,YAAuE,GAC7FI,EAAuBvI,IAAUqB,aAAawE,KAAK9B,GAA5B,QAAA3C,OAAwC+G,EAAxC,aAAoE,GAM3FK,EAAQ,CACV3C,KAAK4C,YAAYhB,QACjB5B,KAAK4B,QACLA,GAIAY,GAAqBG,EAAMxB,KAAKrG,OAAO+H,oBAAoB7J,IAAIgH,KAAK8B,YAAaU,IAErF,IACQE,GAAsBC,EAAMxB,KAAKzB,KAAKC,MAAM+C,IAClD,MAAO9C,GAEL,MADAkD,QAAQC,MAAM/C,KAAK9B,IACb,IAAIjD,MAAJ,4BAAAM,OAC0B+G,EAD1B,2CAAA/G,OACoFqE,EAAEoD,UAIhG,OAAOC,IAAUC,IAAIP,EAAMrD,IAAI,SAAA6D,GAAM,OAAIA,GAAU,kDASpBrI,OAAOsI,cAAcC,8BAA8BrD,KAAK9B,IAChEoF,IAAItD,KAAK8B,YAAa9B,MAE9BlF,OAAOsI,cAAcG,UAAUvD,KAAK8B,aAAa,GACzD9I,IAAI,aAAamI,KAAKnB,6CAWlB6B,GAGX,OAFKA,IAAYA,EAAa7B,KAAK4C,YAAYlK,MAExCmJ,iRCrIM2B,aAOjB,SAAAA,EAAYC,EAAWC,gGAAc3D,CAAAC,KAAAwD,GACjCxD,KAAK2D,SAAW,KAChB3D,KAAK4D,WAAaH,EAClBzD,KAAK6D,cAAgBH,qDA0BrBI,EAAKvH,GAA4C,IAAlCwH,EAAkC3I,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApB,mBACvB4I,EAAUhE,KAAKiE,uBAAuB,MAAOH,EAAKC,GAGxD,OAFA/D,KAAKkE,kBAAkBF,EAASzH,GAChCyH,EAAQG,OACDH,+BAaNF,EAAKM,EAAM7H,GAA4C,IAAlCwH,EAAkC3I,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApB,mBACpC2I,EAAc/D,KAAKqE,gBAAgBD,EAAML,GACzC,IAAMC,EAAUhE,KAAKiE,uBAAuB,OAAQH,EAAKC,GAIzD,OAHA/D,KAAKkE,kBAAkBF,EAASzH,GAEhCyH,EAAQG,KAAKC,GACNJ,iCAaJF,EAAKM,EAAM7H,GAA4C,IAAlCwH,EAAkC3I,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApB,mBACtC2I,EAAc/D,KAAKqE,gBAAgBD,EAAML,GACzC,IAAMC,EAAUhE,KAAKiE,uBAAuB,SAAUH,EAAKC,GAG3D,OAFA/D,KAAKkE,kBAAkBF,EAASzH,GAChCyH,EAAQG,KAAKC,GACNJ,gCAYLF,EAAKM,EAAM7H,GAA4C,IAAlCwH,EAAkC3I,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApB,mBACrC2I,EAAc/D,KAAKqE,gBAAgBD,EAAML,GACzC,IAAMC,EAAUhE,KAAKiE,uBAAuB,QAASH,EAAKC,GAG1D,OAFA/D,KAAKkE,kBAAkBF,EAASzH,GAChCyH,EAAQG,KAAKC,GACNJ,kCASP,GAAIhE,KAAK2D,SACL,OAAO3D,KAAK2D,SAASW,kDAaXN,EAASzH,GACvByH,EAAQ/C,iBAAiB,UAAW,WAChC1E,EAASyH,EAAQO,wDAaTH,EAAML,GAUlB,OAJIK,aAAgBxH,WAChBmH,GAAc,GAGXA,iDAcYS,EAAMV,EAAKC,GAY9B,OAXA/D,KAAK2D,SAAW,IAAIc,eAEpBzE,KAAK2D,SAASe,KAAKF,EAAMV,GACzB9D,KAAK2D,SAASgB,iBAAiB,mBAAoB,kBACnD3E,KAAK2D,SAASgB,iBAAiB,gBAAiB3E,KAAKyD,WACrDzD,KAAK2D,SAASgB,iBAAiB,mBAAoB3E,KAAK0D,cAEpDK,GACA/D,KAAK2D,SAASgB,iBAAiB,eAAgBZ,GAG5C/D,KAAK2D,2CAvJZ,OAAO3D,KAAK4D,gDAOZ,OAAO5D,KAAK6D,ujCChBpB,IACMe,EAA2C,GAC7CC,GAAuB,EAENC,gaAAwCnD,6CA6DrD3B,KAAK+E,QAAU,IAAIvB,IAAW1I,OAAO2I,UAAW3I,OAAO4I,cACvD1D,KAAKgF,OAAS,KACdJ,EAAyCzD,KAAKnB,MAC9CA,KAAKiF,sDAGM,IAAA7D,EAAApB,KAGX,GAF2BnF,SAASqK,KAAK/G,UAAUgH,SAASnF,KAAK4B,QAAQwD,yBAKrE,OAFApF,KAAKgF,OAASlK,OAAOkK,YACrBhF,KAAKqF,eAILR,IAIJA,GAAuB,EACvB7E,KAAKsF,aAAa,WACdlE,EAAK4D,OAASlK,OAAOkK,OACrBnK,SAASqK,KAAK/G,UAAUC,IAAIgD,EAAKQ,QAAQwD,yBAEzCR,EAAyCnI,QAAQ,SAAC8I,GAC9CA,EAASN,yDAKR1I,GACT,IAAMiJ,EAAgBxF,KAAKyF,sBACrBC,EAAkB1F,KAAK4B,QAAQ+D,WAAb,6CAAApK,OAAuEiK,GAAvE,2CAAAjK,OACuByE,KAAK4B,QAAQgE,UADpCrK,OAC+CiK,GACjEK,EAAehL,SAASiL,cAAc,UAO5C,OANAD,EAAarB,KAAO,kBACpBqB,EAAaE,IAAML,EAEnBG,EAAa5E,iBAAiB,OAAQ1E,EAAS5C,KAAKqG,OAAO,GAC3DnF,SAASqK,KAAKc,YAAYH,GAEnBA,yCAIP,OAAO7F,KAAKgF,OAAOiB,QAAQjG,KAAKkG,mBAAmBC,OAAOnG,KAAK9B,8CAI/D,MAAO,CACHkI,MAAO,CACHC,KAAMrG,KAAK4B,QAAQ0E,WACnBC,MAAOvG,KAAK4B,QAAQ4E,YACpBC,MAAOzG,KAAK4B,QAAQ8E,YACpBC,QAAS3G,KAAK4B,QAAQ+E,QACtBC,OAAQ,aACRC,MAAO,WACPC,OAAQ,IAMZC,YAAa/G,KAAK+G,YAAYpN,KAAKqG,MAKnCgH,UAAWhH,KAAKgH,UAAUrN,KAAKqG,6CAOzB,IAAA0B,EAAA1B,KACV,OAAIA,KAAK4B,QAAQqF,iBACNjH,KAAKiH,mBAAmBC,KAAK,WAChC,OAAOxF,EAAKyF,iBAIbnH,KAAKmH,sDAMD,IAAAC,EAAApH,KACX,OAAO,IAAIqH,QAAQ,SAAAC,GACfF,EAAKrC,QAAQ/L,IAAI,sDAAuD,SAAAuL,GACpE,IAAMgD,EAAW7H,KAAKC,MAAM4E,GAC5B+C,EAAQC,EAASC,sDAKV,IAAAC,EAAAzH,KACT0H,EAAqB1H,KAAK2H,mBAIhC,OAAO,IAAIN,QAAQ,SAAAC,GACfG,EAAK1C,QAAQ6C,KAAK,0BAA2BlI,KAAKmI,UAAUH,GAAqB,WAC7EJ,mDAWR,IAAM1J,EAAWF,IAAkBoK,cAAc9H,KAAK9B,GAAG6J,eAEnDL,EAAqB,GAiB3B,OAhBA7O,OAAOgE,KAAKe,GAAUnB,QAAQ,SAAA/C,GAC1B,IAAMsO,EAAUtO,EAAIuO,MAAM,2BAEd,eAARvO,GAAwBsO,GAA8B,IAAnBA,EAAQ3M,SACtCqM,EAAmBM,EAAQ,IAKXN,EAAmBM,EAAQ,IAEnCA,EAAQ,IAAMpK,EAASoK,EAAQ,IANxCN,EAAmBM,EAAQ,IAA3BE,EAAA,GACKF,EAAQ,GAAKpK,EAASoK,EAAQ,QAUxC,CACHG,UAAWT,qCAOTtD,GACN,IAAMgE,EAAuBvN,SAASqB,cAhNA,0EAiNhCmM,EAAiB,CAAEC,UAAWlE,EAAKmE,WAGrCH,GACAA,EAAqBI,QAIzBxK,IAA4BvE,OAAOoB,SAAS4N,MAE5CzI,KAAK+E,QAAQ6C,KACT,0BACAlI,KAAKmI,UAAUQ,GACf,WACIvN,OAAO4N,SAAShN,QAAQ,qBACxBsC,IAA4BS,OAAO5D,SAAS4N,sDASpD,IAAItF,EAAS,GAab,OAZAA,GAAM,WAAA5H,OAAeyE,KAAK4B,QAAQ+G,aAClCxF,GAAM,WAAA5H,OAAeyE,KAAK4B,QAAQgH,QAClCzF,GAAU,oCAENnD,KAAK4B,QAAQiH,WACb1F,GAAM,aAAA5H,OAAiByE,KAAK4B,QAAQiH,WAGpC7I,KAAK4B,QAAQkH,QAAkC,SAAxB9I,KAAK4B,QAAQkH,SACpC3F,GAAM,WAAA5H,OAAeyE,KAAK4B,QAAQkH,SAG/B3F,g1BAlPM2B,YACA,CAIb4B,YAAa,OAKbF,YAAa,OAKbF,WAAY,QAKZqC,YAAa,QAKbI,cAAc,EAKdpD,YAAY,EAKZC,SAAU,GAKVgD,QAAQ,EAKRjC,SAAS,EAOTvB,wBAAyB,4BAKzB6B,kBAAkB,cChEL+B,gaAAsCrH,6CAoBnD3B,KAAKgF,OAAS,KACdhF,KAAK+E,QAAU,IAAIvB,IAAW1I,OAAO2I,UAAW3I,OAAO4I,cACvD1D,KAAKiF,sDAGM,IAAA7D,EAAApB,KAGX,GAF2BnF,SAASqK,KAAK/G,UAAUgH,SAASnF,KAAK4B,QAAQwD,yBAKrE,OAFApF,KAAKgF,OAASlK,OAAOkK,YACrBhF,KAAKqF,eAITrF,KAAKsF,aAAa,WACdlE,EAAK4D,OAASlK,OAAOkK,OACrBnK,SAASqK,KAAK/G,UAAUC,IAAIgD,EAAKQ,QAAQwD,yBAEzChE,EAAKiE,wDAIe,IAAf9I,EAAenB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GACdoK,EAAgBxF,KAAKyF,sBACrBC,EAAkB1F,KAAK4B,QAAQ+D,WAAb,6CAAApK,OAC2BiK,GAD3B,2CAAAjK,OAEyByE,KAAK4B,QAAQgE,UAFtCrK,OAEiDiK,GACnEK,EAAehL,SAASiL,cAAc,UAO5C,OANAD,EAAarB,KAAO,kBACpBqB,EAAaE,IAAML,EAEnBG,EAAa5E,iBAAiB,OAAQ1E,EAAS5C,KAAKqG,OAAO,GAC3DnF,SAASqK,KAAKc,YAAYH,GAEnBA,yCAGI,IAAAnE,EAAA1B,KACLiJ,EAAgB,WACFpO,SAASuB,iBAAiB,+CAA+C,GAE7EhD,QAAUsI,EAAKE,QAAQsH,iBAC/BrO,SAASsO,eAAe,qBAAqB/C,MAAMgD,QAAU,OAC7D1H,EAAKxD,GAAGkI,MAAMgD,QAAU,UAExBvO,SAASsO,eAAe,qBAAqB/C,MAAMgD,QAAU,QAC7D1H,EAAKxD,GAAGkI,MAAMgD,QAAU,SAIhCH,IAEA,IAAMI,EAAaxO,SAASqB,cAAc,oBAO1C,OALiB,IAAIoN,iBAAiB,WAClCL,MAEKM,QAAQF,EAJF,CAAEG,YAAY,EAAOC,WAAW,EAAMC,SAAS,IAMvD1J,KAAKgF,OAAOiB,QAAQjG,KAAKkG,mBAAmBC,OAAOnG,KAAK9B,8CAK/D,MAAO,CACHkI,MAAO,CACHQ,OAAQ,WACRP,KAAMrG,KAAK4B,QAAQ0E,WACnBC,MAAOvG,KAAK4B,QAAQ4E,YACpBC,MAAOzG,KAAK4B,QAAQ8E,YACpBC,QAAS3G,KAAK4B,QAAQ+E,QACtBE,MAAO,OAGX8C,QAAS3J,KAAK2J,QAAQhQ,KAAKqG,MAK3B+G,YAAa/G,KAAK+G,YAAYpN,KAAKqG,MAKnCgH,UAAWhH,KAAKgH,UAAUrN,KAAKqG,uCAI/BoE,EAAMwF,GACV,OAAI/O,SAASsO,eAAe,oBAAoBU,gBACrCD,EAAQtC,UAEZsC,EAAQE,+CAML,IAAA1C,EAAApH,KACV,OAAO,IAAIqH,QAAQ,SAAAC,GACfF,EAAKrC,QAAQ/L,IAAI,0DAA2D,SAAAuL,GACxE,IAAMgD,EAAW7H,KAAKC,MAAM4E,GAC5B+C,EAAQC,EAASC,6CAQnBpD,GACN,IAAMiE,EAAiB,CACnBC,UAAWlE,EAAKmE,UAChBwB,QAAS3F,EAAK4F,SAGlBhK,KAAK+E,QAAQ6C,KACT,2DACAlI,KAAKmI,UAAUQ,GACf,WACQjE,EAAK4F,SAAW5F,EAAKmE,YACrB1N,SAASsO,eAAe,uBAAuB/P,MAAQ,IACvDyB,SAASsO,eAAe,mBAAmB/P,MAAQgL,EAAKmE,UACxD1N,SAASsO,eAAe,iBAAiB/P,MAAQgL,EAAK4F,QAEtDnP,SAASsO,eAAe,oBAAoBc,0DAOxD,IAAI9G,EAAS,GAYb,OAXAA,GAAM,WAAA5H,OAAeyE,KAAK4B,QAAQ+G,aAClCxF,GAAM,WAAA5H,OAAeyE,KAAK4B,QAAQgH,QAE9B5I,KAAK4B,QAAQiH,WACb1F,GAAM,aAAA5H,OAAiByE,KAAK4B,QAAQiH,WAGpC7I,KAAK4B,QAAQkH,QAAkC,SAAxB9I,KAAK4B,QAAQkH,SACpC3F,GAAM,WAAA5H,OAAeyE,KAAK4B,QAAQkH,SAG/B3F,yCAnKM,CACbuD,YAAa,OACbF,YAAa,OACbF,WAAY,QACZqC,YAAa,QACbhD,YAAY,EACZC,SAAU,GACVgD,QAAQ,EACRjC,SAAS,EAOTvB,wBAAyB,+CAhBZ4D,+4BCGAkB,gaAAuBvI,6CASpC3B,KAAKmK,gFAIL,IAAMC,EAAoBjQ,IAAU+B,cAChCrB,SAAS4N,KADa,gBAAAlN,OAENyE,KAAK4B,QAAQyI,sBAFP,OAKtBD,IACAA,EAAkBE,SAAU,87BAnBnBJ,YACA,CAIbG,sBAAuB,SCPVE,gaAAkC5I,kEAqJ/C,IAAM6I,EAA6BrQ,IAAU+B,cACzCrB,SACA,gDAGJ,OAAOV,IAAUqB,aAAagP,EAA4B,6CA9CjCrQ,IAAU+B,cAAcrB,SAAU,qBAC1CoG,iBAAiB,SAAUjB,KAAKyK,kBAAkB9Q,KAAKqG,OACxEA,KAAK0K,gEAIL1K,KAAK2K,QAAS,EACd3K,KAAKgF,OAASlK,OAAO8P,OACrB5K,KAAK6K,YAAc,KAEnB7K,KAAK6K,YAAc7K,KAAKgF,OAAO8F,KAAKC,IAAI,CACpCC,YAAahL,KAAK4B,QAAQoJ,YAC1BC,YAAajL,KAAK4B,QAAQqJ,YAC1B3R,KAAM0G,KAAK4B,QAAQtI,KACnB4R,QAASlL,KAAK4B,QAAQuJ,mBACtBC,eAAgBpL,KAAK4B,QAAQwJ,eAC7BC,SAAUrL,KAAK4B,QAAQ0J,yBACvBC,WAAYvL,KAAK4B,QAAQ4J,WACzBC,YAAazL,KAAK4B,QAAQ6J,YAC1BC,qBAAsB1L,KAAK4B,QAAQ8J,qBACnCC,iBAAkB3L,KAAK4B,QAAQ+J,iBAC/BC,OAAQ5L,KAAK4L,OAAOjS,KAAKqG,MACzB6L,eAAgB7L,KAAK8L,iBAAiBnS,KAAKqG,yCAK/CA,KAAK2K,QAAS,EACYJ,EAA0BwB,+BAE1B/L,KAAK4B,QAAQsH,iBACnClJ,KAAKgM,wEAsBLhM,KAAK2K,QACL3K,KAAK6K,YAAYoB,mEAUrB,GAAIjM,KAAK2K,OAAQ,CACb,IAAMuB,EAAc/R,IAAU+B,cAC1BrB,SADgB,kCAAAU,OAEkByE,KAAK4B,QAAQsH,gBAF/B,OAOpB,GAF0BqB,EAA0BwB,+BAE1B/L,KAAK4B,QAAQsH,kBAAoB/O,IAAUe,aAAagR,EAAa,WAC3FA,EAAYC,aAAa,UAAW,WAEhBhS,IAAU+B,cAAcrB,SAAU,uBAC1C2F,cAAc,IAAI4L,MAAM,sDAY9B9L,GACYiK,EAA0BwB,+BAC1B/L,KAAK4B,QAAQsH,kBAIvC5I,EAAM+L,iBACD/L,EAAMgM,OAAOzC,kBAIlB7J,KAAK+E,QAAU,IAAIvB,IAAW1I,OAAO2I,UAAW3I,OAAO4I,cACvD1D,KAAK+E,QAAQ6C,KAAK,uCAAwClI,KAAKmI,UAAU,IAAK7H,KAAKuM,iBAAiB5S,KAAKqG,kDAM5FuH,GACb,IACMiF,EADQ9M,KAAKC,MAAM4H,GACHnD,KAAKqI,GACrBC,EAAS,CACXC,qBAAqB,EACrBC,gBAAiB5M,KAAK4B,QAAQgL,iBAGlC5M,KAAK+E,QAAQ6C,KAAb,wCAAArM,OAC4CiR,EAD5C,QAEI9M,KAAKmI,UAAU6E,GACf1M,KAAK6M,cAAclT,KAAKqG,6CAIlBuH,GAGc,gBAFX7H,KAAKC,MAAM4H,GAEfuF,YACL9M,KAAKgF,OAAO8F,KAAKC,IAAIgC,iKAzOZxC,YACA,CAMbS,YAAa,SAObC,YAAa,GAOb2B,gBAAiB,GAQjBzB,mBAAoB,GAcpB7R,KAAM,OAYN8R,eAAgB,UAUhB4B,aAAc,SAUdxB,WAAY,SAOZF,yBAA0B,QAO1BG,aAAa,EAObC,sBAAsB,EAQtBC,kBAAkB,ICvG1B,IAAMvI,EAAgBtI,OAAOsI,cAC7BA,EAAc6J,SAAS,0BAA2BnI,EAAiC,qCACnF1B,EAAc6J,SAAS,gCAAiCjE,EAA+B,4CACvF5F,EAAc6J,SAAS,iBAAkB/C,EAAgB,yCACzD9G,EAAc6J,SAAS,4BAA6B1C,EAA2B,sDCVlBrS,EAAAD,QAG5D,WAAqB,aAEtB,IAAAiV,EAAA,SAAA9T,GACA,OAIA,SAAAA,GACA,QAAAA,GAAA,iBAAAA,EALA+T,CAAA/T,KAQA,SAAAA,GACA,IAAAgU,EAAAvU,OAAAkB,UAAA8F,SAAAvH,KAAAc,GAEA,0BAAAgU,GACA,kBAAAA,GAQA,SAAAhU,GACA,OAAAA,EAAAiU,WAAAC,EARAC,CAAAnU,GAZAoU,CAAApU,IAiBAkU,EADA,mBAAApU,eAAAuU,IACAvU,OAAAuU,IAAA,uBAUA,SAAAC,EAAAtU,EAAAwI,GACA,WAAAA,EAAA+L,OAAA/L,EAAAsL,kBAAA9T,GACA6J,GANA2K,EAMAxU,EALAsD,MAAAC,QAAAiR,GAAA,OAKAxU,EAAAwI,GACAxI,EAPA,IAAAwU,EAUA,SAAAC,EAAAvB,EAAAhQ,EAAAsF,GACA,OAAA0K,EAAA/Q,OAAAe,GAAAgD,IAAA,SAAAlF,GACA,OAAAsT,EAAAtT,EAAAwH,KAYA,SAAAkM,EAAAxB,EAAAhQ,EAAAsF,GACA,IAAAmM,EAAA,GAaA,OAZAnM,EAAAsL,kBAAAZ,IACAzT,OAAAgE,KAAAyP,GAAA7P,QAAA,SAAA/C,GACAqU,EAAArU,GAAAgU,EAAApB,EAAA5S,GAAAkI,KAGA/I,OAAAgE,KAAAP,GAAAG,QAAA,SAAA/C,GACAkI,EAAAsL,kBAAA5Q,EAAA5C,KAAA4S,EAAA5S,GAGAqU,EAAArU,GAnBA,SAAAA,EAAAkI,GACA,IAAAA,EAAAoM,YACA,OAAA/K,EAEA,IAAA+K,EAAApM,EAAAoM,YAAAtU,GACA,yBAAAsU,IAAA/K,EAcAgL,CAAAvU,EAAAkI,EAAAqM,CAAA3B,EAAA5S,GAAA4C,EAAA5C,GAAAkI,GAFAmM,EAAArU,GAAAgU,EAAApR,EAAA5C,GAAAkI,KAKAmM,EAGA,SAAA9K,EAAAqJ,EAAAhQ,EAAAsF,IACAA,KAAA,IACAsM,WAAAtM,EAAAsM,YAAAL,EACAjM,EAAAsL,kBAAAtL,EAAAsL,qBAEA,IAAAiB,EAAAzR,MAAAC,QAAAL,GACA8R,EAAA1R,MAAAC,QAAA2P,GACA+B,EAAAF,IAAAC,EAEA,OAAAC,EAEEF,EACFvM,EAAAsM,WAAA5B,EAAAhQ,EAAAsF,GAEAkM,EAAAxB,EAAAhQ,EAAAsF,GAJA8L,EAAApR,EAAAsF,GAoBA,OAZAqB,EAAAC,IAAA,SAAAoL,EAAA1M,GACA,IAAAlF,MAAAC,QAAA2R,GACA,UAAArT,MAAA,qCAGA,OAAAqT,EAAAjN,OAAA,SAAAkN,EAAAlR,GACA,OAAA4F,EAAAsL,EAAAlR,EAAAuE,IACE,KAGFqB,EAnG6DuL,oPCC7D,IAEqBvQ,aAOjB,SAAAA,EAAYwQ,GAA6B,IAArBC,EAAqBtT,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAV,sGAAU2E,CAAAC,KAAA/B,GACrC+B,KAAKyO,OAAUA,aAAkBE,QAAWF,EAAS5T,SAAS4N,KAAKvM,cAAcuS,GACjFzO,KAAK0O,SAAWA,8DA2ChB,qBAAAnT,OAtDe,SAsDf,kJAWA,MAjEe,+CAkBXyE,KAAK3B,UACT2B,KAAKyO,OAAO/P,mBAAmBsB,KAAK4O,eAAgB3Q,EAAqBU,gDAOzE,IAAMkQ,EAAa7O,KAAKyO,OAAOrS,iBAAZ,IAAAb,OA1BJ,WA2Bfc,IAAS0B,QAAQ8Q,EAAY,SAAAC,GAAS,OAAIA,EAAUrQ,4CASpD,OAAQuB,KAAKyO,OAAOrS,iBAAZ,IAAAb,OApCO,WAoC4CF,OAAS,yCAUpE,MAA0B,WAAlB2E,KAAK0O,SAAyB,aAAe","file":"./js/swag-pay-pal.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"undefined/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 44);\n","import StringHelper from 'src/script/helper/string.helper';\n\nexport default class DomAccess {\n\n    /**\n     * Returns whether or not the element is an HTML node\n     *\n     * @param {HTMLElement} element\n     * @returns {boolean}\n     */\n    static isNode(element) {\n        if (!element) return false;\n\n        if (typeof Node === 'object') {\n            return element instanceof Node;\n        }\n\n        const isObject = typeof element === 'object';\n        const isNumber = typeof element.nodeType === 'number';\n        const isString = typeof element.nodeName === 'string';\n\n        const HtmlNode = isObject && isNumber && isString;\n        const RootNode = element === document || element === window;\n\n        return element && (HtmlNode || RootNode);\n    }\n\n    /**\n     * Returns if the given element has the requested attribute/property\n     * @param {HTMLElement} element\n     * @param {string} attribute\n     */\n    static hasAttribute(element, attribute) {\n        if (!DomAccess.isNode(element)) {\n            throw new Error('The element must be a valid HTML Node!');\n        }\n\n        if (typeof element.hasAttribute !== 'function') return false;\n\n        return element.hasAttribute(attribute);\n    }\n\n    /**\n     * Returns the value of a given element's attribute/property\n     * @param {HTMLElement|EventTarget} element\n     * @param {string} attribute\n     * @param {boolean} strict\n     * @returns {*|this|string}\n     */\n    static getAttribute(element, attribute, strict = true) {\n        if (strict && DomAccess.hasAttribute(element, attribute) === false) {\n            throw new Error(`The required property \"${attribute}\" does not exist!`);\n        }\n\n        if (typeof element.getAttribute !== 'function') {\n            if (strict) {\n                throw new Error('This node doesn\\'t support the getAttribute function!');\n            }\n\n            return undefined;\n        }\n\n        return element.getAttribute(attribute);\n    }\n\n    /**\n     * Returns the value of a given elements dataset entry\n     *\n     * @param {HTMLElement|EventTarget} element\n     * @param {string} key\n     * @param {boolean} strict\n     * @returns {*|this|string}\n     */\n    static getDataAttribute(element, key, strict = true) {\n        const keyWithoutData = key.replace(/^data(|-)/, '');\n        const parsedKey = StringHelper.toLowerCamelCase(keyWithoutData, '-');\n        if (!DomAccess.isNode(element)) {\n            if (strict) {\n                throw new Error('The passed node is not a valid HTML Node!');\n            }\n\n            return undefined;\n        }\n\n        if (typeof element.dataset === 'undefined') {\n            if (strict) {\n                throw new Error('This node doesn\\'t support the dataset attribute!');\n            }\n\n            return undefined;\n        }\n\n        const attribute = element.dataset[parsedKey];\n\n        if (typeof attribute === 'undefined') {\n            if (strict) {\n                throw new Error(`The required data attribute \"${key}\" does not exist on ${element}!`);\n            }\n\n            return attribute;\n        }\n\n        return StringHelper.parsePrimitive(attribute);\n    }\n\n    /**\n     * Returns the selected element of a defined parent node\n     * @param {HTMLElement|EventTarget} parentNode\n     * @param {string} selector\n     * @param {boolean} strict\n     * @returns {HTMLElement}\n     */\n    static querySelector(parentNode, selector, strict = true) {\n        if (strict && !DomAccess.isNode(parentNode)) {\n            throw new Error('The parent node is not a valid HTML Node!');\n        }\n\n        const element = parentNode.querySelector(selector) || false;\n\n        if (strict && element === false) {\n            throw new Error(`The required element \"${selector}\" does not exist in parent node!`);\n        }\n\n        return element;\n    }\n\n    /**\n     * Returns the selected elements of a defined parent node\n     *\n     * @param {HTMLElement|EventTarget} parentNode\n     * @param {string} selector\n     * @param {boolean} strict\n     * @returns {NodeList|false}\n     */\n    static querySelectorAll(parentNode, selector, strict = true) {\n        if (strict && !DomAccess.isNode(parentNode)) {\n            throw new Error('The parent node is not a valid HTML Node!');\n        }\n\n        let elements = parentNode.querySelectorAll(selector);\n        if (elements.length === 0) {\n            elements = false;\n        }\n\n        if (strict && elements === false) {\n            throw new Error(`At least one item of \"${selector}\" must exist in parent node!`);\n        }\n\n        return elements;\n    }\n}\n","export default class Iterator {\n\n    /**\n     * This callback is displayed as a global member.\n     * @callback ObjectIterateCallback\n     * @param {value} value\n     * @param {key} key\n     */\n\n    /**\n     * Iterates over an object\n     *\n     * @param {Array|Object} source\n     * @param {ObjectIterateCallback} callback\n     *\n     * @returns {*}\n     */\n    static iterate(source, callback) {\n        if (source instanceof Map) {\n            return source.forEach(callback);\n        }\n\n        if (Array.isArray(source)) {\n            return source.forEach(callback);\n        }\n\n        if (source instanceof FormData) {\n            for(var entry of source.entries()) {\n                callback(entry[1], entry[0]);\n            }\n            return;\n        }\n\n        if (source instanceof Object) {\n            return Object.keys(source).forEach(key => {\n                callback(source[key], key)\n            });\n        }\n\n        throw new Error(`The element type ${typeof source} is not iterable!`);\n    }\n}\n","import Iterator from 'src/script/helper/iterator.helper';\n\n/**\n * this utility serializes a form via the FormData class\n */\nexport default class FormSerializeUtil {\n\n    /**\n     * serializes a form\n     *\n     * @param {HTMLFormElement} form\n     * @param {boolean} strict\n     *\n     * @returns {*}\n     */\n    static serialize(form, strict = true) {\n\n        if (form.nodeName !== 'FORM') {\n            if (strict) {\n                throw new Error('The passed element is not a form!');\n            }\n\n            return {};\n        }\n\n        return new FormData(form);\n    }\n\n    /**\n     *\n     * serializes the form and returns\n     * its data as json\n     *\n     * @param {HTMLFormElement} form\n     * @param {boolean} strict\n     * @returns {*}\n     */\n    static serializeJson(form, strict = true) {\n        const formData = FormSerializeUtil.serialize(form, strict);\n        if (formData === {}) return formData;\n        const json = {};\n\n        Iterator.iterate(formData, (value, key) => json[key] = value);\n\n        return json;\n    }\n}\n","import LoadingIndicatorUtil from 'src/script/utility/loading-indicator/loading-indicator.util';\n\nconst ELEMENT_LOADER_CLASS = 'element-loader-backdrop';\n\nexport default class ElementLoadingIndicatorUtil extends LoadingIndicatorUtil {\n\n    /**\n     * adds the loader from the element\n     *\n     * @param {HTMLElement} el\n     */\n    static create(el) {\n        el.classList.add('has-element-loader');\n        if (ElementLoadingIndicatorUtil.exists(el)) return;\n        ElementLoadingIndicatorUtil.appendLoader(el);\n        setTimeout(() => {\n            const loader = el.querySelector(`.${ELEMENT_LOADER_CLASS}`);\n            if (!loader) {\n                return;\n            }\n\n            loader.classList.add('element-loader-backdrop-open');\n        }, 1);\n    }\n\n    /**\n     * removes the loader from the element\n     *\n     * @param {HTMLElement} el\n     */\n    static remove(el) {\n        el.classList.remove('has-element-loader');\n        const loader = el.querySelector(`.${ELEMENT_LOADER_CLASS}`);\n        if (!loader) {\n            return;\n        }\n\n        loader.remove();\n    }\n\n    /**\n     * checks if a loader is already present\n     *\n     * @param {HTMLElement} el\n     *\n     * @returns {boolean}\n     */\n    static exists(el) {\n        return (el.querySelectorAll(`.${ELEMENT_LOADER_CLASS}`).length > 0);\n    }\n\n\n    /**\n     * returns the loader template\n     *\n     * @returns {string}\n     */\n    static getTemplate() {\n        return `\n        <div class=\"${ELEMENT_LOADER_CLASS}\">\n            <div class=\"loader\" role=\"status\">\n                <span class=\"sr-only\">Loading...</span>\n            </div>\n        </div>\n        `;\n    }\n\n    /**\n     * inserts the loader into the passed element\n     *\n     * @param {HTMLElement} el\n     */\n    static appendLoader(el) {\n        el.insertAdjacentHTML('beforeend', ElementLoadingIndicatorUtil.getTemplate());\n    }\n\n}\n","export default class StringHelper {\n\n\n    /**\n     * turns first character of word to uppercase\n     *\n     * @param {string} string\n     * @returns {string}\n     * @private\n     */\n    static ucFirst(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n\n\n    /**\n     * turns first character of string to uppercase\n     *\n     * @param {string} string\n     * @returns {string}\n     * @private\n     */\n    static lcFirst(string) {\n        return string.charAt(0).toLowerCase() + string.slice(1);\n    }\n\n    /**\n     * converts a camel case string\n     * into a dash case string\n     *\n     * @param string\n     * @returns {string}\n     */\n    static toDashCase(string) {\n        return string.replace(/([A-Z])/g, '-$1').replace(/^-/, '').toLowerCase();\n    }\n\n    /**\n     *\n     * @param {string} string\n     * @param {string} separator\n     *\n     * @returns {string}\n     */\n    static toLowerCamelCase(string, separator) {\n        const upperCamelCase = StringHelper.toUpperCamelCase(string, separator);\n        return StringHelper.lcFirst(upperCamelCase);\n    }\n\n    /**\n     *\n     * @param {string} string\n     * @param {string} separator\n     *\n     * @returns {string}\n     */\n    static toUpperCamelCase(string, separator) {\n        if (!separator) {\n            return StringHelper.ucFirst(string.toLowerCase());\n        }\n\n        const stringParts = string.split(separator);\n        return stringParts.map(string => StringHelper.ucFirst(string.toLowerCase())).join('');\n    }\n\n    /**\n     * returns primitive value of a string\n     *\n     * @param value\n     * @returns {*}\n     * @private\n     */\n    static parsePrimitive(value) {\n        try {\n            // replace comma with dot\n            // if value only contains numbers and commas\n            if (/^\\d+(.|,)\\d+$/.test(value)) {\n                value = value.replace(',', '.');\n            }\n\n            return JSON.parse(value);\n        }\n        catch (e) {\n            return value.toString();\n        }\n    }\n}\n","export default class NativeEventEmitter {\n    /**\n     * Event Emitter which works with the provided DOM element. The class isn't meant to be\n     * extended. It should rather being used as a mixin component to provide the ability to\n     * publish events.\n     *\n     * @example\n     * const emitter = new NativeEventEmitter();\n     * emitter.publish('my-event-name');\n     *\n     * @example using custom data\n     * const emitter = new NativeEventEmitter();\n     * emitter.subscribe('my-event-name', (event) => {\n     *     console.log(event.detail);\n     * });\n     * emitter.publish('my-event-name', { custom: 'data' });\n     *\n     * @example using a custom scope\n     * const emitter = new NativeEventEmitter();\n     * emitter.subscribe('my-event-name', (event) => {\n     *     console.log(event.detail);\n     * }, { scope: myScope });\n     * emitter.publish('my-event-name', { custom: 'data' });\n     *\n     * @example once listeners\n     * const emitter = new NativeEventEmitter();\n     * emitter.subscribe('my-event-name', (event) => {\n     *     console.log(event.detail);\n     * }, { once: true });\n     * emitter.publish('my-event-name', { custom: 'data' });\n     *\n     * @constructor\n     * @param {Document|HTMLElement} [el = document]\n     */\n    constructor(el = document) {\n        this._el = el;\n        el.$emitter = this;\n        this._listeners = [];\n    }\n\n    /**\n     * Publishes an event on the element. Additional information can be added using the `data` parameter.\n     * The data are accessible in the event handler in `event.detail` which represents the standard\n     * implementation.\n     */\n    publish(eventName, detail = {}) {\n        const event = new CustomEvent(eventName, {\n            detail\n        });\n\n        this.el.dispatchEvent(event);\n    }\n\n    /**\n     * Subscribes to an event and adds a listener.\n     *\n     * @param {String} eventName\n     * @param {Function} callback\n     * @param {Object} [opts = {}]\n     */\n    subscribe(eventName, callback, opts = {}) {\n        const emitter = this;\n        const splitEventName = eventName.split('.');\n        let cb = opts.scope ? callback.bind(opts.scope) : callback;\n\n        // Support for listeners which are fired once\n        if (opts.once && opts.once === true) {\n            const onceCallback = cb;\n            cb = function onceListener(event) {\n                emitter.unsubscribe(eventName);\n                onceCallback(event);\n            };\n        }\n\n        this.el.addEventListener(splitEventName[0], cb);\n\n        this.listeners.push({\n            splitEventName,\n            opts,\n            cb\n        });\n\n        return true;\n    }\n\n    /**\n     * Removes an event listener.\n     *\n     * @param {String} eventName\n     */\n    unsubscribe(eventName) {\n        const splitEventName = eventName.split('.');\n        this.listeners = this.listeners.reduce((accumulator, listener) => {\n            const foundEvent = listener.splitEventName.sort().toString() === splitEventName.sort().toString();\n\n            if (foundEvent) {\n                this.el.removeEventListener(listener.splitEventName[0], listener.cb);\n                return accumulator;\n            }\n\n            accumulator.push(listener);\n            return accumulator;\n        }, []);\n\n        return true;\n    }\n\n    /**\n     * Resets the listeners\n     *\n     * @return {boolean}\n     */\n    reset() {\n        // Loop through the event listener and remove them from the element\n        this.listeners.forEach((listener) => {\n            this.el.removeEventListener(listener.splitEventName[0], listener.cb);\n        });\n\n        // Reset registry\n        this.listeners = [];\n        return true;\n    }\n\n    get el() {\n        return this._el;\n    }\n\n    set el(value) {\n        this._el = value;\n    }\n\n    get listeners() {\n        return this._listeners;\n    }\n\n    set listeners(value) {\n        this._listeners = value;\n    }\n}\n","import deepmerge from 'deepmerge';\nimport DomAccess from 'src/script/helper/dom-access.helper';\nimport StringHelper from 'src/script/helper/string.helper';\nimport NativeEventEmitter from 'src/script/helper/emitter.helper';\n\n/**\n * Plugin Base class\n */\nexport default class Plugin {\n    /**\n     * plugin constructor\n     *\n     * @param {HTMLElement} el\n     * @param {Object} options\n     * @param {string} pluginName\n     */\n    constructor(el, options = {}, pluginName = false) {\n        if (!DomAccess.isNode(el)) {\n            throw new Error('There is no valid element given.');\n        }\n\n        this.el = el;\n        this.$emitter = new NativeEventEmitter(this.el);\n        this._pluginName = this._getPluginName(pluginName);\n        this.options = this._mergeOptions(options);\n        this._initialized = false;\n\n        this._registerInstance();\n        this._init();\n    }\n\n    /**\n     * this function gets executed when the plugin is initialized\n     */\n    init() {\n        throw new Error(`The \"init\" method for the plugin \"${this._pluginName}\" is not defined.`);\n    }\n\n    /**\n     * this function gets executed when the plugin is being updated\n     */\n    update() {\n\n    }\n\n    /**\n     * internal init method which checks\n     * if the plugin is already initialized\n     * before executing the public init\n     *\n     * @private\n     */\n    _init() {\n        if (this._initialized) return;\n\n        this.init();\n        this._initialized = true;\n    }\n\n    /**\n     * internal update method which checks\n     * if the plugin is already initialized\n     * before executing the public update\n     *\n     * @private\n     */\n    _update() {\n        if (!this._initialized) return;\n\n        this.update();\n    }\n\n    /**\n     * deep merge the passed options and the static defaults\n     *\n     * @param {Object} options\n     *\n     * @private\n     */\n    _mergeOptions(options) {\n        const dashedPluginName = StringHelper.toDashCase(this._pluginName);\n        const dataAttributeConfig = DomAccess.getDataAttribute(this.el, `data-${dashedPluginName}-config`, false);\n        const dataAttributeOptions = DomAccess.getAttribute(this.el, `data-${dashedPluginName}-options`, false);\n\n\n        // static plugin options\n        // previously merged options\n        // explicit options when creating a plugin instance with 'new'\n        const merge = [\n            this.constructor.options,\n            this.options,\n            options,\n        ];\n\n        // options which are set via data-plugin-name-config=\"config name\"\n        if (dataAttributeConfig) merge.push(window.PluginConfigManager.get(this._pluginName, dataAttributeConfig));\n        // options which are set via data-plugin-name-options=\"{json..}\"\n        try {\n            if (dataAttributeOptions) merge.push(JSON.parse(dataAttributeOptions));\n        } catch (e) {\n            console.error(this.el);\n            throw new Error(\n                `The data attribute \"data-${dashedPluginName}-options\" could not be parsed to json: ${e.message}`\n            );\n        }\n\n        return deepmerge.all(merge.map(config => config || {}));\n    }\n\n    /**\n     * registers the plugin Instance to the element\n     *\n     * @private\n     */\n    _registerInstance() {\n        const elementPluginInstances = window.PluginManager.getPluginInstancesFromElement(this.el);\n        elementPluginInstances.set(this._pluginName, this);\n\n        const plugin = window.PluginManager.getPlugin(this._pluginName, false);\n        plugin.get('instances').push(this);\n    }\n\n    /**\n     * returns the plugin name\n     *\n     * @param {string} pluginName\n     *\n     * @returns {string}\n     * @private\n     */\n    _getPluginName(pluginName) {\n        if (!pluginName) pluginName = this.constructor.name;\n\n        return pluginName;\n    }\n\n}\n","export default class HttpClient {\n\n    /**\n     * Constructor.\n     * @param {string} accessKey\n     * @param {string} contextToken\n     */\n    constructor(accessKey, contextToken) {\n        this._request = null;\n        this._accessKey = accessKey;\n        this._contextToken = contextToken;\n    }\n\n    /**\n     * @returns {string}\n     */\n    get accessKey() {\n        return this._accessKey;\n    }\n\n    /**\n     * @returns {string}\n     */\n    get contextToken() {\n        return this._contextToken;\n    }\n\n    /**\n     * Request GET\n     *\n     * @param {string} url\n     * @param {function} callback\n     * @param {string} contentType\n     *\n     * @returns {XMLHttpRequest}\n     */\n    get(url, callback, contentType = 'application/json') {\n        const request = this._createPreparedRequest('GET', url, contentType);\n        this._registerOnLoaded(request, callback);\n        request.send();\n        return request;\n    }\n\n    /**\n     * Request POST\n     *\n     * @param {string} url\n     * @param {object|null} data\n     * @param {function} callback\n     * @param {string} contentType\n     *\n     * @returns {XMLHttpRequest}\n     */\n    post(url, data, callback, contentType = 'application/json') {\n        contentType = this._getContentType(data, contentType);\n        const request = this._createPreparedRequest('POST', url, contentType);\n        this._registerOnLoaded(request, callback);\n\n        request.send(data);\n        return request;\n    }\n\n    /**\n     * Request DELETE\n     *\n     * @param {string} url\n     * @param {object|null} data\n     * @param {function} callback\n     * @param {string} contentType\n     *\n     * @returns {XMLHttpRequest}\n     */\n    delete(url, data, callback, contentType = 'application/json') {\n        contentType = this._getContentType(data, contentType);\n        const request = this._createPreparedRequest('DELETE', url, contentType);\n        this._registerOnLoaded(request, callback);\n        request.send(data);\n        return request;\n    }\n\n    /**\n     * Request PATCH\n     * @param {string} url\n     * @param {object|null} data\n     * @param {function} callback\n     * @param {string} contentType\n     *\n     * @returns {XMLHttpRequest}\n     */\n    patch(url, data, callback, contentType = 'application/json') {\n        contentType = this._getContentType(data, contentType);\n        const request = this._createPreparedRequest('PATCH', url, contentType);\n        this._registerOnLoaded(request, callback);\n        request.send(data);\n        return request;\n    }\n\n    /**\n     * Abort running Request\n     *\n     * @returns {*}\n     */\n    abort() {\n        if (this._request) {\n            return this._request.abort();\n        }\n    }\n\n    /**\n     * register event listener\n     * which executes the given callback\n     * when the request has finished\n     *\n     * @param request\n     * @param callback\n     * @private\n     */\n    _registerOnLoaded(request, callback) {\n        request.addEventListener('loadend', () => {\n            callback(request.responseText);\n        });\n    }\n\n    /**\n     * returns the appropriate content type for the request\n     *\n     * @param {*} data\n     * @param {string} contentType\n     *\n     * @returns {string|boolean}\n     * @private\n     */\n    _getContentType(data, contentType) {\n\n        // when sending form data,\n        // the content-type has to be automatically set,\n        // to use the correct content-disposition\n        // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition\n        if (data instanceof FormData) {\n            contentType = false;\n        }\n\n        return contentType;\n    }\n\n    /**\n     * Returns a new and configured XMLHttpRequest object which\n     * is prepared to being used\n     *\n     * @param {'GET'|'POST'|'DELETE'|'PATCH'} type\n     * @param {string} url\n     * @param {string} contentType\n     *\n     * @returns {XMLHttpRequest}\n     * @private\n     */\n    _createPreparedRequest(type, url, contentType) {\n        this._request = new XMLHttpRequest();\n\n        this._request.open(type, url);\n        this._request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n        this._request.setRequestHeader('sw-access-key', this.accessKey);\n        this._request.setRequestHeader('sw-context-token', this.contextToken);\n\n        if (contentType) {\n            this._request.setRequestHeader('Content-type', contentType);\n        }\n\n        return this._request;\n    }\n}\n","/* eslint-disable import/no-unresolved */\n\nimport Plugin from 'src/script/plugin-system/plugin.class';\nimport HttpClient from 'src/script/service/http-client.service';\nimport ElementLoadingIndicatorUtil from 'src/script/utility/loading-indicator/element-loading-indicator.util';\nimport FormSerializeUtil from 'src/script/utility/form/form-serialize.util';\nimport './swag-paypal.express-checkout.scss';\n\nconst OFF_CANVAS_CART_CLOSE_BUTTON_SELECTOR = '.btn.btn-light.btn-block.offcanvas-close.js-offcanvas-close.sticky-top';\nconst SwagPayPalExpressCheckoutButtonInstances = [];\nlet isInjectionTriggered = false;\n\nexport default class SwagPayPalExpressCheckoutButton extends Plugin {\n    static options = {\n        /**\n         * This option specifies the PayPal button color\n         */\n        buttonColor: 'gold',\n\n        /**\n         * This option specifies the PayPal button shape\n         */\n        buttonShape: 'rect',\n\n        /**\n         * This option specifies the PayPal button size\n         */\n        buttonSize: 'small',\n\n        /**\n         * This option specifies the language of the PayPal button\n         */\n        languageIso: 'en_GB',\n\n        /**\n         * This option specifies if the PayPal button appears on the checkout/register page\n         */\n        loginEnabled: false,\n\n        /**\n         * This option toggles the SandboxMode\n         */\n        useSandbox: false,\n\n        /**\n         * This option holds the client id specified in the settings\n         */\n        clientId: '',\n\n        /**\n         * This option toggles the PayNow/Login text at PayPal\n         */\n        commit: false,\n\n        /**\n         * This option toggles the Text below the PayPal Express button\n         */\n        tagline: false,\n\n        /**\n         * The class that indicates if the script is loaded\n         *\n         * @type string\n         */\n        paypalScriptLoadedClass: 'paypal-checkout-js-loaded',\n\n        /**\n         * This option toggles the Process whether or not the product needs to be added to the cart.\n         */\n        addProductToCart: false\n    };\n\n    init() {\n        this._client = new HttpClient(window.accessKey, window.contextToken);\n        this.paypal = null;\n        SwagPayPalExpressCheckoutButtonInstances.push(this);\n        this.createButton();\n    }\n\n    createButton() {\n        const paypalScriptLoaded = document.head.classList.contains(this.options.paypalScriptLoadedClass);\n\n        if (paypalScriptLoaded) {\n            this.paypal = window.paypal;\n            this.renderButton();\n            return;\n        }\n\n        if (isInjectionTriggered) {\n            return;\n        }\n\n        isInjectionTriggered = true;\n        this.createScript(() => {\n            this.paypal = window.paypal;\n            document.head.classList.add(this.options.paypalScriptLoadedClass);\n\n            SwagPayPalExpressCheckoutButtonInstances.forEach((instance) => {\n                instance.createButton();\n            });\n        });\n    }\n\n    createScript(callback) {\n        const scriptOptions = this.getScriptUrlOptions();\n        const payPalScriptUrl = this.options.useSandbox ? `https://www.paypal.com/sdk/js?client-id=sb${scriptOptions}` :\n            `https://www.paypal.com/sdk/js?client-id=${this.options.clientId}${scriptOptions}`;\n        const payPalScript = document.createElement('script');\n        payPalScript.type = 'text/javascript';\n        payPalScript.src = payPalScriptUrl;\n\n        payPalScript.addEventListener('load', callback.bind(this), false);\n        document.head.appendChild(payPalScript);\n\n        return payPalScript;\n    }\n\n    renderButton() {\n        return this.paypal.Buttons(this.getButtonConfig()).render(this.el);\n    }\n\n    getButtonConfig() {\n        return {\n            style: {\n                size: this.options.buttonSize,\n                shape: this.options.buttonShape,\n                color: this.options.buttonColor,\n                tagline: this.options.tagline,\n                layout: 'horizontal',\n                label: 'checkout',\n                height: 40\n            },\n\n            /**\n             * Will be called if the express button is clicked\n             */\n            createOrder: this.createOrder.bind(this),\n\n            /**\n             * Will be called if the payment process is approved by paypal\n             */\n            onApprove: this.onApprove.bind(this)\n        };\n    }\n\n    /**\n     * @return {Promise}\n     */\n    createOrder() {\n        if (this.options.addProductToCart) {\n            return this.addProductToCart().then(() => {\n                return this._createOrder();\n            });\n        }\n\n        return this._createOrder();\n    }\n\n    /**\n     * @return {Promise}\n     */\n    _createOrder() {\n        return new Promise(resolve => {\n            this._client.get('/sales-channel-api/v1/_action/paypal/create-payment', responseText => {\n                const response = JSON.parse(responseText);\n                resolve(response.token);\n            });\n        });\n    }\n\n    addProductToCart() {\n        const formattedLineItems = this._formatLineItems();\n\n        // TODO PT-10569 Create a new cart\n\n        return new Promise(resolve => {\n            this._client.post('/checkout/line-item/add', JSON.stringify(formattedLineItems), () => {\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Returns the line item data with keys like: lineItems[06e28a73ecd44a0e84e5ddf144dff8d7][quantity],\n     * as a proper Object.\n     * @return {Object}\n     */\n    _formatLineItems() {\n        const formData = FormSerializeUtil.serializeJson(this.el.parentElement);\n\n        const formattedLineItems = {};\n        Object.keys(formData).forEach(key => {\n            const matches = key.match(/lineItems\\[(.+)]\\[(.+)]/);\n\n            if (key !== 'redirectTo' && matches && matches.length === 3) {\n                if (!formattedLineItems[matches[1]]) {\n                    formattedLineItems[matches[1]] = {\n                        [matches[2]]: formData[matches[0]]\n                    };\n                } else {\n                    const lineItem = formattedLineItems[matches[1]];\n\n                    lineItem[matches[2]] = formData[matches[0]];\n                }\n            }\n        });\n\n        return {\n            lineItems: formattedLineItems\n        };\n    }\n\n    /**\n     * @param data\n     */\n    onApprove(data) {\n        const offCanvasCloseButton = document.querySelector(OFF_CANVAS_CART_CLOSE_BUTTON_SELECTOR);\n        const requestPayload = { paymentId: data.paymentID };\n\n        // If the offCanvasCartCloseButton is visible, we close the offCanvsCart by clicking the element\n        if (offCanvasCloseButton) {\n            offCanvasCloseButton.click();\n        }\n\n        // Add a loading indicator to the body to prevent the user breaking the checkout process\n        ElementLoadingIndicatorUtil.create(document.body);\n\n        this._client.post(\n            '/paypal/approve-payment',\n            JSON.stringify(requestPayload),\n            () => {\n                window.location.replace('/checkout/confirm');\n                ElementLoadingIndicatorUtil.remove(document.body);\n            }\n        );\n    }\n\n    /**\n     * @return {string}\n     */\n    getScriptUrlOptions() {\n        let config = '';\n        config += `&locale=${this.options.languageIso}`;\n        config += `&commit=${this.options.commit}`;\n        config += '&disable-funding=card,credit,sepa';\n\n        if (this.options.currency) {\n            config += `&currency=${this.options.currency}`;\n        }\n\n        if (this.options.intent && this.options.intent !== 'sale') {\n            config += `&intent=${this.options.intent}`;\n        }\n\n        return config;\n    }\n}\n","/* eslint-disable import/no-unresolved */\n\nimport Plugin from 'src/script/plugin-system/plugin.class';\nimport HttpClient from 'src/script/service/http-client.service';\n\nexport default class SwagPayPalSmartPaymentButtons extends Plugin {\n    static options = {\n        buttonColor: 'gold',\n        buttonShape: 'rect',\n        buttonSize: 'small',\n        languageIso: 'en_GB',\n        useSandbox: true,\n        clientId: '',\n        commit: false,\n        tagline: false,\n\n        /**\n         * The selector for the indicator whether the PayPal javascript is already loaded or not\n         *\n         * @type string\n         */\n        paypalScriptLoadedClass: 'paypal-checkout-js-loaded'\n    };\n\n    init() {\n        this.paypal = null;\n        this._client = new HttpClient(window.accessKey, window.contextToken);\n        this.createButton();\n    }\n\n    createButton() {\n        const paypalScriptLoaded = document.head.classList.contains(this.options.paypalScriptLoadedClass);\n\n        if (paypalScriptLoaded) {\n            this.paypal = window.paypal;\n            this.renderButton();\n            return;\n        }\n\n        this.createScript(() => {\n            this.paypal = window.paypal;\n            document.head.classList.add(this.options.paypalScriptLoadedClass);\n\n            this.renderButton();\n        });\n    }\n\n    createScript(callback = {}) {\n        const scriptOptions = this.getScriptUrlOptions();\n        const payPalScriptUrl = this.options.useSandbox\n            ? `https://www.paypal.com/sdk/js?client-id=sb${scriptOptions}`\n            : `https://www.paypal.com/sdk/js?client-id=${this.options.clientId}${scriptOptions}`;\n        const payPalScript = document.createElement('script');\n        payPalScript.type = 'text/javascript';\n        payPalScript.src = payPalScriptUrl;\n\n        payPalScript.addEventListener('load', callback.bind(this), false);\n        document.head.appendChild(payPalScript);\n\n        return payPalScript;\n    }\n\n    renderButton() {\n        const toggleButtons = () => {\n            const checked = document.querySelectorAll('input.payment-method-input[checked=checked]')[0];\n\n            if (checked.value === this.options.paymentMethodId) {\n                document.getElementById('confirmFormSubmit').style.display = 'none';\n                this.el.style.display = 'block';\n            } else {\n                document.getElementById('confirmFormSubmit').style.display = 'block';\n                this.el.style.display = 'none';\n            }\n        };\n\n        toggleButtons();\n\n        const targetNode = document.querySelector('.confirm-payment');\n        const config = { attributes: false, childList: true, subtree: false };\n        const observer = new MutationObserver(() => {\n            toggleButtons();\n        });\n        observer.observe(targetNode, config);\n\n        return this.paypal.Buttons(this.getButtonConfig()).render(this.el);\n    }\n\n\n    getButtonConfig() {\n        return {\n            style: {\n                layout: 'vertical',\n                size: this.options.buttonSize,\n                shape: this.options.buttonShape,\n                color: this.options.buttonColor,\n                tagline: this.options.tagline,\n                label: 'pay'\n            },\n\n            onClick: this.onClick.bind(this),\n\n            /**\n             * Will be called if the express button is clicked\n             */\n            createOrder: this.createOrder.bind(this),\n\n            /**\n             * Will be called if the payment process is approved by paypal\n             */\n            onApprove: this.onApprove.bind(this)\n        };\n    }\n\n    onClick(data, actions) {\n        if (document.getElementById('confirmOrderForm').checkValidity()) {\n            return actions.resolve();\n        }\n        return actions.reject();\n    }\n\n    /**\n     * @return {Promise}\n     */\n    createOrder() {\n        return new Promise(resolve => {\n            this._client.get('/sales-channel-api/v1/_action/paypal/spb/create-payment', responseText => {\n                const response = JSON.parse(responseText);\n                resolve(response.token);\n            });\n        });\n    }\n\n    /**\n     * @param data\n     */\n    onApprove(data) {\n        const requestPayload = {\n            paymentId: data.paymentID,\n            payerId: data.payerID\n        };\n\n        this._client.post(\n            '/sales-channel-api/v1/_action/paypal/spb/approve-payment',\n            JSON.stringify(requestPayload),\n            () => {\n                if (data.payerID && data.paymentID) {\n                    document.getElementById('isPayPalSpbCheckout').value = '1';\n                    document.getElementById('paypalPaymentId').value = data.paymentID;\n                    document.getElementById('paypalPayerId').value = data.payerID;\n\n                    document.getElementById('confirmOrderForm').submit();\n                }\n            }\n        );\n    }\n\n    getScriptUrlOptions() {\n        let config = '';\n        config += `&locale=${this.options.languageIso}`;\n        config += `&commit=${this.options.commit}`;\n\n        if (this.options.currency) {\n            config += `&currency=${this.options.currency}`;\n        }\n\n        if (this.options.intent && this.options.intent !== 'sale') {\n            config += `&intent=${this.options.intent}`;\n        }\n\n        return config;\n    }\n}\n","/* eslint-disable import/no-unresolved */\n\nimport Plugin from 'src/script/plugin-system/plugin.class';\nimport DomAccess from 'src/script/helper/dom-access.helper';\n\n/**\n * This Plugin selects the PayPal payment method if the user is being redirected by the express implementation.\n */\nexport default class PayPalSelector extends Plugin {\n    static options = {\n        /**\n         * This option is used to select the PayPal radio button\n         */\n        paypalPaymentMethodId: ''\n    };\n\n    init() {\n        this.selectPaymentMethodPayPal();\n    }\n\n    selectPaymentMethodPayPal() {\n        const paypalRadioButton = DomAccess.querySelector(\n            document.body,\n            `input[value=\"${this.options.paypalPaymentMethodId}\"]`\n        );\n\n        if (paypalRadioButton) {\n            paypalRadioButton.checked = true;\n        }\n    }\n}\n","/* eslint-disable import/no-unresolved */\n\nimport Plugin from 'src/script/plugin-system/plugin.class';\nimport DomAccess from 'src/script/helper/dom-access.helper';\nimport HttpClient from 'src/script/service/http-client.service';\n\nexport default class SwagPayPalPlusPaymentWall extends Plugin {\n    static options = {\n        /**\n         * The ID of the div element where the payment wall iFrame should be rendered\n         *\n         * @type string\n         */\n        placeholder: 'ppplus',\n\n        /**\n         * The approvalUrl that is returned by the `create payment` call\n         *\n         * @type string\n         */\n        approvalUrl: '',\n\n        /**\n         * The ID of the PayPal payment\n         *\n         * @type string\n         */\n        paypalPaymentId: '',\n\n        /**\n         * An ISO-3166 country code.\n         * Country in which the PayPal PLUS service will be deployed.\n         *\n         * @type string\n         */\n        customerCountryIso: '',\n\n        /**\n         * Depending on the mode, the library will load the PSP from different locations. live will\n         * load it from paypal.com whereas sandbox will load it from sandbox.paypal.com. The\n         * library will also emit warning to the console if the mode is sandbox (in live mode it will\n         * do so only for required parameters).\n         *\n         * Available modes:\n         *  - \"live\"\n         *  - \"sandbox\"\n         *\n         * @type string\n         */\n        mode: 'live',\n\n        /**\n         * Determines the location of the Continue button. Don't forget to set the onContinue\n         * parameter.\n         *\n         * Available locations:\n         *  - \"inside\"\n         *  - \"outside\"\n         *\n         *  @type string\n         */\n        buttonLocation: 'outside',\n\n        /**\n         * Determines if one of the following should be preselected:\n         * nothing (=\"none\"),\n         * PayPal Wallet (=\"paypal\") or\n         * third party method with methodName\n         *\n         * @type string\n         */\n        preSelection: 'paypal',\n\n        /**\n         * Checkout flow to be implemented by the Merchant. If not set, the default will be set to\n         * the \"Continue\" flow. The checkout flow selected determines whether the merchant\n         * explicitly requires that the buyer reviews and confirms the payment on a review page\n         * (\"Continue\" Flow) or if he/she can confirm payment on PayPal (\"Commit\" Flow).\n         *\n         * @type string\n         */\n        userAction: 'commit',\n\n        /**\n         * The language ISO (ISO_639) for the payment wall.\n         *\n         * @type string\n         */\n        customerSelectedLanguage: 'en_GB',\n\n        /**\n         * If set to \"true\" it will activate a message that indicates that surcharges will be applied.\n         *\n         * @type boolean\n         */\n        surcharging: false,\n\n        /**\n         * If set to \"true\" it will show a loading spinner until the PSP is completely rendered.\n         *\n         * @type boolean\n         */\n        showLoadingIndicator: true,\n\n        /**\n         * If set to \"true\" PUI is shown in sandbox mode (NOTE: this parameter is ignored in\n         * production mode!)\n         *\n         * @type boolean\n         */\n        showPuiOnSandbox: true\n    };\n\n    init() {\n        const confirmOrderForm = DomAccess.querySelector(document, '#confirmOrderForm');\n        confirmOrderForm.addEventListener('submit', this.onConfirmCheckout.bind(this));\n        this.createPaymentWall();\n    }\n\n    createPaymentWall() {\n        this.loaded = false;\n        this.paypal = window.PAYPAL;\n        this.paymentWall = null;\n\n        this.paymentWall = this.paypal.apps.PPP({\n            placeholder: this.options.placeholder,\n            approvalUrl: this.options.approvalUrl,\n            mode: this.options.mode,\n            country: this.options.customerCountryIso,\n            buttonLocation: this.options.buttonLocation,\n            language: this.options.customerSelectedLanguage,\n            useraction: this.options.userAction,\n            surcharging: this.options.surcharging,\n            showLoadingIndicator: this.options.showLoadingIndicator,\n            showPuiOnSandbox: this.options.showPuiOnSandbox,\n            onLoad: this.onLoad.bind(this),\n            enableContinue: this.onEnableContinue.bind(this)\n        });\n    }\n\n    onLoad() {\n        this.loaded = true;\n        const selectedPaymentId = SwagPayPalPlusPaymentWall.getSelectedPaymentMethodId();\n\n        if (selectedPaymentId !== this.options.paymentMethodId) {\n            this.clearPaymentSelection();\n        }\n    }\n\n    /**\n     * Returns the currently selected payment id.\n     *\n     * @returns {String}\n     */\n    static getSelectedPaymentMethodId() {\n        const selectedPaymentMethodRadio = DomAccess.querySelector(\n            document,\n            '*[checked=\"checked\"][name=\"paymentMethodId\"]'\n        );\n\n        return DomAccess.getAttribute(selectedPaymentMethodRadio, 'value');\n    }\n\n    /**\n     * This function deselect any payment method inside the iFrame\n     */\n    clearPaymentSelection() {\n        if (this.loaded) {\n            this.paymentWall.deselectPaymentMethod();\n        }\n    }\n\n    /**\n     * This function will be triggered if the \"enableContinue\" event was fired inside the iFrame.\n     * In addition to that, this event can be used to determine if the user has clicked on one of the payment\n     * methods inside the iFrame. If so, it has to be checked, if PayPal is selected as payment method or not\n     */\n    onEnableContinue() {\n        if (this.loaded) {\n            const paypalRadio = DomAccess.querySelector(\n                document,\n                `*[name=paymentMethodId][value=\"${this.options.paymentMethodId}\"]`\n            );\n\n            const selectedPaymentId = SwagPayPalPlusPaymentWall.getSelectedPaymentMethodId();\n\n            if (selectedPaymentId !== this.options.paymentMethodId && !DomAccess.hasAttribute(paypalRadio, 'checked')) {\n                paypalRadio.setAttribute('checked', 'checked');\n\n                const paymentForm = DomAccess.querySelector(document, '#confirmPaymentForm');\n                paymentForm.dispatchEvent(new Event('change'));\n            }\n        }\n    }\n\n    /**\n     * Will be triggered when the confirm form was submitted.\n     * In this case, the order will be patched and the PayPal\n     * checkout process will be triggered afterwards\n     *\n     * @param {Event} event\n     */\n    onConfirmCheckout(event) {\n        const selectedPaymentId = SwagPayPalPlusPaymentWall.getSelectedPaymentMethodId();\n        if (selectedPaymentId !== this.options.paymentMethodId) {\n            return;\n        }\n\n        event.preventDefault();\n        if (!event.target.checkValidity()) {\n            return;\n        }\n\n        this._client = new HttpClient(window.accessKey, window.contextToken);\n        this._client.post('/sales-channel-api/v1/checkout/order', JSON.stringify({}), this.afterCreateOrder.bind(this));\n    }\n\n    /**\n     * @param {String} response\n     */\n    afterCreateOrder(response) {\n        const order = JSON.parse(response);\n        const orderId = order.data.id;\n        const params = {\n            isPayPalPlusEnabled: true,\n            paypalPaymentId: this.options.paypalPaymentId\n        };\n\n        this._client.post(\n            `/sales-channel-api/v1/checkout/order/${orderId}/pay`,\n            JSON.stringify(params),\n            this.afterPayOrder.bind(this)\n        );\n    }\n\n    afterPayOrder(response) {\n        const data = JSON.parse(response);\n\n        if (data.paymentUrl === 'plusPatched') {\n            this.paypal.apps.PPP.doCheckout();\n        }\n    }\n}\n","// Import all necessary Storefront plugins and scss files\nimport SwagPayPalExpressCheckoutButton from './express-checkout-button/swag-paypal.express-checkout';\nimport SwagPayPalSmartPaymentButtons from './smart-payment-buttons/swag-paypal.smart-payment-buttons';\nimport PayPalSelector from './paypal-selector/paypal-selector';\nimport SwagPayPalPlusPaymentWall from './plus/payment-wall';\n\n// Register them via the existing PluginManager\nconst PluginManager = window.PluginManager;\nPluginManager.register('SwagPayPalExpressButton', SwagPayPalExpressCheckoutButton, '[data-swag-paypal-express-button]');\nPluginManager.register('SwagPayPalSmartPaymentButtons', SwagPayPalSmartPaymentButtons, '[data-swag-paypal-smart-payment-buttons]');\nPluginManager.register('PayPalSelector', PayPalSelector, 'input[name=\"isPayPalExpressCheckout\"]');\nPluginManager.register('SwagPayPalPlusPaymentWall', SwagPayPalPlusPaymentWall, '[data-payPalPaymentWall=\"true\"]');\n\n// Necessary for the webpack hot module reloading server\nif (module.hot) {\n    module.hot.accept();\n}\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.deepmerge = factory());\n}(this, (function () { 'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tObject.keys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tObject.keys(source).forEach(function(key) {\n\t\tif (!options.isMergeableObject(source[key]) || !target[key]) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nreturn deepmerge_1;\n\n})));\n","import Iterator from 'src/script/helper/iterator.helper';\n\nconst SELECTOR_CLASS = 'loader';\n\nexport default class LoadingIndicatorUtil {\n\n    /**\n     * Constructor\n     * @param {Element|string} parent\n     * @param position\n     */\n    constructor(parent, position = 'before') {\n        this.parent = (parent instanceof Element) ? parent : document.body.querySelector(parent);\n        this.position = position;\n    }\n\n    /**\n     * Inserts a loading indicator inside the parent element's html\n     */\n    create() {\n        if (this.exists()) return;\n        this.parent.insertAdjacentHTML(this._getPosition(), LoadingIndicatorUtil.getTemplate());\n    }\n\n    /**\n     * Removes all existing loading indicators inside the parent\n     */\n    remove() {\n        const indicators = this.parent.querySelectorAll(`.${SELECTOR_CLASS}`);\n        Iterator.iterate(indicators, indicator => indicator.remove());\n    }\n\n    /**\n     * Checks if a loading indicator already exists\n     * @returns {boolean}\n     * @protected\n     */\n    exists() {\n        return (this.parent.querySelectorAll(`.${SELECTOR_CLASS}`).length > 0);\n    }\n\n    /**\n     * Defines the position to which the loading indicator shall be inserted.\n     * Depends on the usage of the \"insertAdjacentHTML\" method.\n     * @returns {\"afterbegin\"|\"beforeend\"}\n     * @private\n     */\n    _getPosition() {\n        return (this.position === 'before') ? 'afterbegin' : 'beforeend';\n    }\n\n    /**\n     * The loading indicators HTML template definition\n     * @returns {string}\n     */\n    static getTemplate() {\n        return `<div class=\"${SELECTOR_CLASS}\" role=\"status\">\n                    <span class=\"sr-only\">Loading...</span>\n                </div>`;\n    }\n\n    /**\n     * Return the constant\n     * @returns {string}\n     * @constructor\n     */\n    static SELECTOR_CLASS() {\n        return SELECTOR_CLASS;\n    }\n}\n"],"sourceRoot":""}