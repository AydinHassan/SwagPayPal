(this.webpackJsonp=this.webpackJsonp||[]).push([["swag-pay-pal"],{"+iaI":function(e){e.exports=JSON.parse('{"swag-paypal-frw-credentials":{"buttonGetCredentials":"Get API credentials","textIntroPayPal":"To get PayPal up and running you only need to provide your PayPal API credentials.","labelClientId":"Client-ID","labelClientSecret":"Client-Secret","labelSandbox":"Sandbox","textSettingsHeader":"Advanced settings","messageFetchedError":"Try again or use the advanced settings to provide your credentials.","titleFetchedError":"An error occurred","textFetchedSuccessful":"Credentials have been fetched.","titleNoCredentials":"Error","messageNoCredentials":"No credentials provided.","titleTestSuccess":"Success","messageTestSuccess":"Credentials are valid.","titleTestError":"An error occurred"}}')},"/tld":function(e,t,a){},"6uOG":function(e,t,a){},"83ZM":function(e,t){e.exports='{% block swag_paypal_payment_action_refund %}\n    <sw-modal variant="small"\n              :title="$tc(`swag-paypal-payment.modal.title.refund`)"\n              @modal-close="$emit(\'modal-close\')">\n        {% block swag_paypal_payment_action_refund_invoice_select %}\n            <sw-select-field :label="$tc(\'swag-paypal-payment.refundAction.invoiceSelect.label\')"\n                             v-model="selectedCaptureId"\n                             @change="preserveCapture">\n                <option v-for="capture in captures"\n                        :value="capture.id">\n                    {{ capture.label }}\n                </option>\n            </sw-select-field>\n        {% endblock %}\n        {% block swag_paypal_payment_action_refund_amount %}\n            <sw-field type="number"\n                      v-model="refundAmount"\n                      :max="refundableAmount"\n                      :min="0"\n                      :label="$tc(\'swag-paypal-payment.refundAction.refundAmount.label\')"\n                      :suffix="selectedCapture.currency">\n            </sw-field>\n        {% endblock %}\n        {% block swag_paypal_payment_action_refund_confirm_button %}\n            <template #modal-footer>\n                <sw-button variant="primary"\n                           @click="refund">\n                    {{ $tc(\'swag-paypal-payment.refundAction.confirmButton.text\') }}\n                </sw-button>\n            </template>\n        {% endblock %}\n        <sw-loader v-if="isLoading"></sw-loader>\n    </sw-modal>\n{% endblock %}\n'},"8Juq":function(e,t,a){var n=a("wT0C");"string"==typeof n&&(n=[[e.i,n,""]]),n.locals&&(e.exports=n.locals);(0,a("SZ7m").default)("6539a43c",n,!0,{})},"9+hv":function(e,t){e.exports='{% block swag_paypal_payment_actions %}\n    <div>\n        <div class="swag-paypal-payment-actions__button-container">\n            <div class="swag-paypal-payment-actions__authorize-button-group">\n                {% block swag_paypal_payment_actions_void %}\n                    <sw-button v-if="showVoidButton"\n                               @click="spawnModal(\'void\')"\n                               size="small">\n                        {{ $tc(\'swag-paypal-payment.buttons.label.void\') }}\n                    </sw-button>\n                {% endblock %}\n\n                {% block swag_paypal_payment_actions_capture %}\n                    <sw-button v-if="captureableAmount > 0"\n                               @click="spawnModal(\'capture\')"\n                               size="small">\n                        {{ $tc(\'swag-paypal-payment.buttons.label.capture\') }}\n                    </sw-button>\n                {% endblock %}\n            </div>\n            {% block swag_paypal_payment_actions_refund %}\n                <sw-button variant="primary"\n                           @click="spawnModal(\'refund\')"\n                           size="small"\n                           :disabled="refundableAmount <= 0">\n                    {{ $tc(\'swag-paypal-payment.buttons.label.refund\') }}\n                </sw-button>\n            {% endblock %}\n        </div>\n\n        {% block swag_paypal_payment_actions_modal %}\n                {% block swag_paypal_payment_actions_modal_capture %}\n                    <swag-paypal-payment-action-capture v-if="modalType === \'capture\'"\n                                                        :orderId="orderId"\n                                                        :paymentResource="paymentResource"\n                                                        :maxCaptureValue="captureableAmount"\n                                                        @modal-close="closeModal">\n                    </swag-paypal-payment-action-capture>\n                {% endblock %}\n\n                {% block swag_paypal_payment_actions_modal_refund %}\n                    <swag-paypal-payment-action-refund v-if="modalType === \'refund\'"\n                                                       :orderId="orderId"\n                                                       :paymentResource="paymentResource"\n                                                       @modal-close="closeModal">\n                    </swag-paypal-payment-action-refund>\n                {% endblock %}\n\n                {% block swag_paypal_payment_actions_modal_void %}\n                    <swag-paypal-payment-action-void v-if="modalType === \'void\'"\n                                                     :orderId="orderId"\n                                                     :paymentResource="paymentResource"\n                                                     @modal-close="closeModal">\n                    </swag-paypal-payment-action-void>\n                {% endblock %}\n        {% endblock %}\n    </div>\n{% endblock %}\n'},J2Rl:function(e,t){e.exports='{% block swag_paypal_payment_action_capture %}\n    <sw-modal variant="small"\n              :title="$tc(`swag-paypal-payment.modal.title.capture`)"\n              @modal-close="$emit(\'modal-close\')">\n        {% block swag_paypal_payment_action_capture_max_amount %}\n            <sw-text-field :label="$tc(\'swag-paypal-payment.captureAction.maxAmount\')"\n                           :disabled="true"\n                           v-model="maxCaptureValue">\n            </sw-text-field>\n        {% endblock %}\n        {% block swag_paypal_payment_action_capture_value %}\n            <sw-field type="number"\n                      v-model="captureValue"\n                      :max="maxCaptureValue"\n                      :min="0"\n                      :label="$tc(\'swag-paypal-payment.captureAction.currentAmount\')"\n                      :suffix="currency">\n            </sw-field>\n        {% endblock %}\n        {% block swag_paypal_payment_action_capture_is_final_capture %}\n            <sw-checkbox-field :label="$tc(\'swag-paypal-payment.captureAction.isFinal\')"\n                               v-model="isFinalCapture">\n            </sw-checkbox-field>\n        {% endblock %}\n        {% block swag_paypal_payment_action_capture_submit_button %}\n            <template #modal-footer>\n                <sw-button variant="primary"\n                           @click="capture">\n                    {{ $tc(\'swag-paypal-payment.captureAction.button.text\') }}\n                </sw-button>\n            </template>\n        {% endblock %}\n        <sw-loader v-if="isLoading"></sw-loader>\n    </sw-modal>\n{% endblock %}\n'},Pcnz:function(e,t){e.exports='{% block sw_order_detail_content_tabs_general %}\n    {% parent %}\n\n    <sw-tabs-item v-if="isPayPalPayment"\n                  :route="{ name: \'swag.paypal.payment.detail\', params: { id: $route.params.id } }"\n                  :title="$tc(\'swag-paypal.header\')">\n        {{ $tc(\'swag-paypal.header\') }}\n    </sw-tabs-item>\n{% endblock %}\n\n\n{% block sw_order_detail_actions %}\n    <template v-if="isEditable">\n        {% parent %}\n    </template>\n{% endblock %}'},Qret:function(e,t,a){"use strict";a.r(t);var n=a("ROb5"),s=a.n(n);a("T0/x");const{Component:i,Mixin:r}=Shopware,o=Shopware.Utils;window.onboardedCallback=function(e,t){Shopware.Application.getApplicationRoot().$emit("paypal-onboarding-finish",{authCode:e,sharedId:t})},i.register("swag-paypal-frw-credentials",{template:s.a,inject:["systemConfigApiService","SwagPayPalApiCredentialsService","addNextCallback"],mixins:[r.getByName("notification")],props:{},data:()=>({isLoading:!1,config:{},authCode:"",sharedId:"",nonce:`${o.createId()}${o.createId()}`,fetchedSuccessful:null,lockGetApiCredentials:!1}),computed:{onBoardingUrl(){const e=`${window.location.origin}${window.location.pathname}#${this.$route.path}`,t=new URLSearchParams;return t.append("channelId","partner"),t.append("partnerId",this.payPalPartnerId),t.append("productIntentId","addipmt"),t.append("integrationType","FO"),t.append("features","PAYMENT,REFUND,READ_SELLER_DISPUTE,UPDATE_SELLER_DISPUTE,ADVANCED_TRANSACTIONS_SEARCH"),t.append("partnerClientId",this.payPalPartnerClientId),t.append("returnToPartnerUrl",e),t.append("displayMode","minibrowser"),t.append("sellerNonce",this.nonce),`${this.payPalHost}/US/merchantsignup/partner/onboardingentry?${t.toString()}`},payPalPartnerId(){return this.sandboxMode?"J425NKDMLL4YA":"W8HDQ6LB42CJW"},payPalPartnerClientId(){return this.sandboxMode?"AdRxw_8f4e2MOEduZB6D6ZOkdjnbR3SQJ1dQP3Y6GDLkxK0g4j0km2V2tRjoVDe0T2ZqQX6NlzpKsBwE":"AVTKpaE_t1zRCDfiJOP1ZYMAW0S_IvASFOIhhbeszRUFY0vsFIsGrt_FFsgHKU4VJiqub-tI30dpnANJ"},payPalHost(){return this.sandboxMode?"https://www.sandbox.paypal.com":"https://www.paypal.com"},sandboxMode(){return this.config["SwagPayPal.settings.sandbox"]||!1}},created(){this.createdComponent()},mounted(){this.mountedComponent()},destroyed(){this.destroyedComponent()},methods:{createdComponent(){this.fetchPayPalConfig(),this.addNextCallback(this.onClickNext),this.$root.$on("paypal-onboarding-finish",this.getPayPalCredentials)},mountedComponent(){this.createScript()},destroyedComponent(){this.$root.$off("paypal-onboarding-finish")},getPayPalCredentials({authCode:e,sharedId:t}){this.lockGetApiCredentials||(this.lockGetApiCredentials=!0,this.fetchedSuccessful=null,this.isLoading=!0,this.SwagPayPalApiCredentialsService.getApiCredentials(e,t,this.nonce,this.config["SwagPayPal.settings.sandbox"]).then(e=>{this.$set(this.config,"SwagPayPal.settings.clientId",e.client_id),this.$set(this.config,"SwagPayPal.settings.clientSecret",e.client_secret),this.fetchedSuccessful=!0}).catch(()=>{this.$set(this.config,"SwagPayPal.settings.clientId",""),this.$set(this.config,"SwagPayPal.settings.clientSecret",""),this.fetchedSuccessful=!1,this.createNotificationError({title:this.$tc("swag-paypal-frw-credentials.titleFetchedError"),message:this.$tc("swag-paypal-frw-credentials.messageFetchedError"),duration:1e4})}).finally(()=>{this.isLoading=!1,this.lockGetApiCredentials=!1}))},onClickNext(){return this.config["SwagPayPal.settings.clientId"]&&this.config["SwagPayPal.settings.clientSecret"]?this.fetchedSuccessful?this.saveConfig().then(()=>Promise.resolve(!1)).catch(()=>Promise.resolve(!0)):this.testApiCredentials().then(e=>"success"===e?this.saveConfig().then(()=>Promise.resolve(!1)).catch(()=>Promise.resolve(!0)):Promise.resolve(!0)):(this.createNotificationError({title:this.$tc("swag-paypal-frw-credentials.titleNoCredentials"),message:this.$tc("swag-paypal-frw-credentials.messageNoCredentials")}),Promise.resolve(!0))},fetchPayPalConfig(){return this.isLoading=!0,this.systemConfigApiService.getValues("SwagPayPal.settings",null).then(e=>{this.config=e}).finally(()=>{this.isLoading=!1})},saveConfig(){return this.isLoading=!0,this.systemConfigApiService.saveValues(this.config,null).then(()=>{this.isLoading=!1})},testApiCredentials(){return this.isLoading=!0,this.SwagPayPalApiCredentialsService.validateApiCredentials(this.config["SwagPayPal.settings.clientId"],this.config["SwagPayPal.settings.clientSecret"],this.config["SwagPayPal.settings.sandbox"]).then(e=>{return e.credentialsValid?(this.isLoading=!1,"success"):"error"}).catch(e=>{if(e.response.data&&e.response.data.errors){let t="<ul>";e.response.data.errors.forEach(e=>{t=`${t}<li>${e.detail}</li>`}),t+="</ul>",this.createNotificationError({title:this.$tc("swag-paypal-frw-credentials.titleTestError"),message:t}),this.isLoading=!1}return"error"})},onCredentialsChanged(){null!==this.fetchedSuccessful&&(this.fetchedSuccessful=null)},createScript(){const e="paypal-js";if(!document.getElementById(e)){const t="https://www.paypal.com/webapps/merchantboarding/js/lib/lightbox/partner.js",a=document.createElement("script");a.id=e,a.type="text/javascript",a.src=t,a.async=!0,a.addEventListener("load",this.renderPayPalButton.bind(this),!1),document.head.appendChild(a)}},renderPayPalButton(){window.PAYPAL.apps.Signup.render=function(){window.PAYPAL.apps.Signup.timeout&&clearTimeout(window.PAYPAL.apps.Signup.timeout),window.PAYPAL.apps.Signup.timeout=setTimeout(window.PAYPAL.apps.Signup.render,300)},window.PAYPAL.apps.Signup.render()}}});var l=a("VVZb"),c=a.n(l);const{Component:d}=Shopware;d.override("sw-first-run-wizard-paypal-credentials",{template:c.a});var p=a("XB45"),u=a.n(p);var m={WEBHOOK_RESULT_CREATED:"created",WEBHOOK_RESULT_NOTHING:"nothing",WEBHOOK_RESULT_UPDATED:"updated"};const{Mixin:g}=Shopware;var h={name:"swag-paypal",template:u.a,mixins:[g.getByName("notification")],inject:["SwagPayPalWebhookRegisterService","SwagPayPalApiCredentialsService"],data:()=>({isLoading:!1,isSaveSuccessful:!1,config:{},clientIdFilled:!1,clientSecretFilled:!1,showValidationErrors:!1,...m}),metaInfo(){return{title:this.$createTitle()}},methods:{saveFinish(){this.isSaveSuccessful=!1},onConfigChange(e){this.config=e,this.checkCredentialsFilled(),this.showValidationErrors=!1},checkCredentialsFilled(){const e=this.$refs.systemConfig.actualConfigData.null;null===this.$refs.systemConfig.currentSalesChannelId?(this.clientIdFilled=!!this.config["SwagPayPal.settings.clientId"],this.clientSecretFilled=!!this.config["SwagPayPal.settings.clientSecret"]):(this.clientIdFilled=!!this.config["SwagPayPal.settings.clientId"]||!!e["SwagPayPal.settings.clientId"],this.clientSecretFilled=!!this.config["SwagPayPal.settings.clientSecret"]||!!e["SwagPayPal.settings.clientSecret"])},onSave(){this.clientIdFilled&&this.clientSecretFilled?(this.isSaveSuccessful=!1,this.isLoading=!0,this.$refs.systemConfig.saveAll().then(()=>{this.isLoading=!1,this.isSaveSuccessful=!0,this.SwagPayPalWebhookRegisterService.registerWebhook(this.$refs.systemConfig.currentSalesChannelId).then(e=>{const t=e.result;t!==this.WEBHOOK_RESULT_NOTHING&&(t!==this.WEBHOOK_RESULT_CREATED?(t===this.WEBHOOK_RESULT_UPDATED&&this.createNotificationSuccess({title:this.$tc("swag-paypal.settingForm.titleSuccess"),message:this.$tc("swag-paypal.settingForm.messageWebhookUpdated")}),this.isLoading=!1):this.createNotificationSuccess({title:this.$tc("swag-paypal.settingForm.titleSuccess"),message:this.$tc("swag-paypal.settingForm.messageWebhookCreated")}))}).catch(e=>{if(e.response.data&&e.response.data.errors){let t=`${this.$tc("swag-paypal.settingForm.messageWebhookError")}<br><br><ul>`;e.response.data.errors.forEach(e=>{t=`${t}<li>${e.detail}</li>`}),t+="</li>",this.createNotificationError({title:this.$tc("swag-paypal.settingForm.titleError"),message:t})}this.isLoading=!1})}).catch(()=>{this.isLoading=!1})):this.showValidationErrors=!0},onTest(){this.isLoading=!0,this.SwagPayPalApiCredentialsService.validateApiCredentials(this.config["SwagPayPal.settings.clientId"],this.config["SwagPayPal.settings.clientSecret"],this.config["SwagPayPal.settings.sandbox"]).then(e=>{e.credentialsValid&&(this.createNotificationSuccess({title:this.$tc("swag-paypal.settingForm.titleSuccess"),message:this.$tc("swag-paypal.settingForm.messageTestSuccess")}),this.isLoading=!1)}).catch(e=>{if(e.response.data&&e.response.data.errors){let t=`${this.$tc("swag-paypal.settingForm.messageTestError")}<br><br><ul>`;e.response.data.errors.forEach(e=>{t=`${t}<li>${e.detail}</li>`}),t+="</li>",this.createNotificationError({title:this.$tc("swag-paypal.settingForm.titleError"),message:t}),this.isLoading=!1}})},getBind(e,t){return t!==this.config&&this.onConfigChange(t),this.showValidationErrors&&("SwagPayPal.settings.clientId"!==e.name||this.clientIdFilled||(e.config.error={code:1,detail:this.$tc("swag-paypal.messageNotBlank")}),"SwagPayPal.settings.clientSecret"!==e.name||this.clientSecretFilled||(e.config.error={code:1,detail:this.$tc("swag-paypal.messageNotBlank")})),"SwagPayPal.settings.orderNumberPrefix"===e.name&&(e.config.disabled=!this.config["SwagPayPal.settings.sendOrderNumber"]),"SwagPayPal.settings.plusOverwritePaymentName"===e.name&&this.setPlusDefaultValue(e,"plusOverwritePaymentName"),"SwagPayPal.settings.plusExtendPaymentDescription"===e.name&&this.setPlusDefaultValue(e,"plusExtendPaymentDescription"),"SwagPayPal.settings.spbButtonLanguageIso"===e.name&&(e.config.disabled=!this.config["SwagPayPal.settings.spbCheckoutEnabled"]),"SwagPayPal.settings.spbAlternativePaymentMethodsEnabled"===e.name&&(e.config.disabled=!this.config["SwagPayPal.settings.spbCheckoutEnabled"]),e},setPlusDefaultValue(e,t){e.config.disabled=!this.config["SwagPayPal.settings.plusEnabled"];const a=`SwagPayPal.settings.${t}`;void 0!==this.config[a]&&""!==this.config[a]||(this.config[a]=this.$tc(`swag-paypal.settingForm.plus.${t}`))}}},y=a("s5le"),w=a.n(y);const{Component:f}=Shopware;f.override("sw-settings-index",{template:w.a});var b=a("qp5Y"),P=a("bL4Y");const{Module:_}=Shopware;_.register("swag-paypal",{type:"plugin",name:"SwagPayPal",title:"swag-paypal.general.mainMenuItemGeneral",description:"swag-paypal.general.descriptionTextModule",version:"1.0.0",targetVersion:"1.0.0",color:"#9AA8B5",icon:"default-action-settings",snippets:{"de-DE":b,"en-GB":P},routes:{index:{component:h,path:"index",meta:{parentPath:"sw.settings.index"}}}});var S=a("Pcnz"),v=a.n(S);const{Component:C,State:A}=Shopware,k=Shopware.Data.Criteria;C.override("sw-order-detail",{template:v.a,data:()=>({isPayPalPayment:!1}),metaInfo(){return{title:`${this.identifier} | ${this.$tc("swag-paypal-payment.general.title")} | ${this.$tc("global.sw-admin-menu.textShopwareAdmin")}`}},computed:{identifier(){return null!==this.order?this.order.orderNumber:""},paymentMethodStore:()=>A.getStore("payment_method"),isEditable(){return!this.isPayPalPayment||"swag.paypal.payment.detail"!==this.$route.name},showTabs:()=>!0},created(){this.$router.push({name:"sw.order.detail",params:{id:this.orderId}})},watch:{orderId:{deep:!0,handler(){if(!this.orderId)return void this.setIsPayPalPayment(null);const e=this.repositoryFactory.create("order"),t=new k(1,1);t.addAssociation("transactions"),e.get(this.orderId,this.context,t).then(e=>{if(e.transactions.length<=0||!e.transactions[0].paymentMethodId)return void this.setIsPayPalPayment(null);const t=e.transactions[0].paymentMethodId;null!=t&&this.setIsPayPalPayment(t)})},immediate:!0}},methods:{setIsPayPalPayment(e){e&&this.paymentMethodStore.getByIdAsync(e).then(e=>{this.isPayPalPayment="handler_swag_paypalpaymenthandler"===e.formattedHandlerIdentifier||"handler_swag_paypalpuipaymenthandler"===e.formattedHandlerIdentifier})}}});var $=a("S35c"),x=a.n($);const{Component:I}=Shopware;I.override("sw-plugin-list",{template:x.a});var T=a("9+hv"),E=a.n(T),R=(a("8Juq"),a("J2Rl")),D=a.n(R);const{Component:L,Mixin:N}=Shopware,B=Shopware.Utils;L.register("swag-paypal-payment-action-capture",{template:D.a,inject:["SwagPayPalPaymentService"],mixins:[N.getByName("notification")],props:{paymentResource:{type:Object,required:!0},maxCaptureValue:{type:Number,required:!0},orderId:{type:String,required:!0}},data(){return{isFinalCapture:!0,captureValue:this.maxCaptureValue,isLoading:!0,currency:this.paymentResource.transactions[0].amount.currency}},created(){this.createdComponent()},methods:{createdComponent(){this.isLoading=!1},capture(){const e=this.captureValue,t=this.currency,a=this.isFinalCapture,n=this.paymentResource.intent,s=this.getResourceId(this.paymentResource);this.isLoading=!0,this.SwagPayPalPaymentService.capturePayment(this.orderId,n,s,e,t,a).then(()=>{this.createNotificationSuccess({title:this.$tc("swag-paypal-payment.captureAction.successTitle"),message:this.$tc("swag-paypal-payment.captureAction.successMessage")}),this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${B.createId()}`)})}).catch(e=>{this.createNotificationError({title:e.title,message:e.message}),this.isLoading=!1})},getResourceId(e){const t=e.transactions[0].related_resources[0];return t.authorization?t.authorization.id:t.order.id}}});var F=a("83ZM"),M=a.n(F);const{Component:z,Mixin:O,Filter:Z}=Shopware,W=Shopware.Utils;z.register("swag-paypal-payment-action-refund",{template:M.a,inject:["SwagPayPalPaymentService"],mixins:[O.getByName("notification")],props:{paymentResource:{type:Object,required:!0},orderId:{type:String,required:!0}},computed:{dateFilter:()=>Z.getByName("date")},data:()=>({captures:[],selectedCapture:{},refundAmount:0,refundableAmount:0,isLoading:!0,selectedCaptureId:""}),created(){this.createdComponent()},methods:{createdComponent(){this.getRefundableCaptures(),this.selectedCaptureId=this.captures[0].id,this.isLoading=!1,this.preserveCapture(),this.refundAmount=Number(this.captures[0].refundableAmount)},getRefundableCaptures(){const e=this.paymentResource.transactions[0].related_resources;this.captures=e.reduce((e,t)=>{if(t.sale){const a=t.sale;"refunded"!==a.state&&e.push(this.formatCapture(a,"sale"))}if(t.capture){const a=t.capture;"refunded"!==a.state&&"partially_refunded"!==a.state&&e.push(this.formatCapture(a,"capture"))}return e},this.captures)},formatCapture(e,t){return{label:`${this.dateFilter(e.create_time)} (${e.amount.total} ${e.amount.currency})`+` - ${e.id} [${e.state}]`,id:e.id,refundableAmount:e.amount.total,currency:e.amount.currency,type:t}},preserveCapture(){const e=this.captures.find(e=>e.id===this.selectedCaptureId);this.selectedCapture=e,this.refundableAmount=Number(e.refundableAmount),this.refundAmount=Number(e.refundableAmount)},refund(){this.isLoading=!0;const e=this.refundAmount,t=this.selectedCapture.currency,a=this.selectedCapture.type,n=this.selectedCapture.id,s=this.$route.params.id;this.SwagPayPalPaymentService.refundPayment(this.orderId,a,n,e,t,s).then(()=>{this.createNotificationSuccess({title:this.$tc("swag-paypal-payment.refundAction.successTitle"),message:this.$tc("swag-paypal-payment.refundAction.successMessage")}),this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${W.createId()}`)})}).catch(e=>{this.createErrorNotification({title:e.title,message:e.message,autoClose:!1})})}}});var H=a("WsQt"),V=a.n(H);const{Component:U,Mixin:G}=Shopware,J=Shopware.Utils;U.register("swag-paypal-payment-action-void",{template:V.a,inject:["SwagPayPalPaymentService"],mixins:[G.getByName("notification")],props:{paymentResource:{type:Object,required:!0},orderId:{type:String,required:!0}},data:()=>({isLoading:!1}),methods:{voidPayment(){this.isLoading=!0;const e=this.paymentResource.intent,t=this.getResourceId(),a=this.$route.params.id;this.SwagPayPalPaymentService.voidPayment(this.orderId,e,t,a).then(()=>{this.createNotificationSuccess({title:this.$tc("swag-paypal-payment.voidAction.successTitle"),message:this.$tc("swag-paypal-payment.voidAction.successMessage")}),this.isLoading=!1,this.closeModal(),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${J.createId()}`)})}).catch(e=>{this.createNotificationError({title:e.title,message:e.message}),this.isLoading=!1})},getResourceId(){const e=this.paymentResource.transactions[0].related_resources[0];return e.order?e.order.id:e.authorization.id},closeModal(){this.$emit("modal-close")}}});const{Component:Y}=Shopware;Y.register("swag-paypal-payment-actions",{template:E.a,props:{paymentResource:{type:Object,required:!0},orderId:{type:String,required:!0}},data:()=>({modalType:"",refundableAmount:0,captureableAmount:0,showVoidButton:!1}),created(){this.createdComponent()},methods:{createdComponent(){this.setPaymentActionAmounts(),this.setShowVoidButton(),this.captureableAmount=this.formatAmount(this.captureableAmount),this.refundableAmount=this.formatAmount(this.refundableAmount)},spawnModal(e){this.modalType=e},closeModal(){this.modalType=""},setPaymentActionAmounts(){this.paymentResource.transactions[0].related_resources.forEach(e=>{if(e.authorization&&(this.captureableAmount=e.authorization.amount.total),e.order&&(this.captureableAmount=e.order.amount.total),e.sale&&"refunded"!==e.sale.state&&(this.refundableAmount=e.sale.amount.total),e.capture){const t=e.capture.amount.total;this.captureableAmount-=t,"refunded"!==e.capture.state&&"partially_refunded"!==e.capture.state&&(this.refundableAmount+=t)}})},setShowVoidButton(){const e=this.paymentResource.transactions[0].related_resources[0];if(!e)return;const t=["voided","captured","completed"];if(!e.sale){if(e.order){const a=e.order;if(t.includes(a.state))return void(this.captureableAmount=0);this.showVoidButton=!0}if(e.authorization){const a=e.authorization;if(t.includes(a.state))return void(this.captureableAmount=0);this.showVoidButton=!0}}},formatAmount:e=>Number(`${Math.round(`${e}e2`)}e-2`)}});var j=a("WObG"),K=a.n(j);a("y1GL");const{Component:q,Mixin:Q,Filter:X,State:ee}=Shopware;q.register("swag-paypal-payment-detail",{template:K.a,inject:["SwagPayPalPaymentService"],mixins:[Q.getByName("notification")],watch:{$route(){this.resetDataAttributes(),this.createdComponent()}},data:()=>({paymentResource:{},relatedResources:[],isLoading:!0,createDateTime:"",updateDateTime:"",currency:"",amount:{}}),computed:{dateFilter:()=>X.getByName("date"),orderStore:()=>ee.getStore("order"),relatedResourceColumns(){return[{property:"type",label:this.$tc("swag-paypal-payment.transactionHistory.types.type"),rawData:!0},{property:"total",label:this.$tc("swag-paypal-payment.transactionHistory.types.amount"),rawData:!0},{property:"id",label:this.$tc("swag-paypal-payment.transactionHistory.types.trackingId"),rawData:!0},{property:"status",label:this.$tc("swag-paypal-payment.transactionHistory.types.state"),rawData:!0},{property:"transactionFee",label:this.$tc("swag-paypal-payment.transactionHistory.types.transactionFee"),rawData:!0},{property:"paymentMode",label:this.$tc("swag-paypal-payment.transactionHistory.types.paymentMode"),rawData:!0},{property:"create",label:this.$tc("swag-paypal-payment.transactionHistory.types.createTime"),rawData:!0},{property:"update",label:this.$tc("swag-paypal-payment.transactionHistory.types.updateTime"),rawData:!0}]}},created(){this.createdComponent()},methods:{createdComponent(){const e=this.$route.params.id;this.orderStore.getByIdAsync(e).then(e=>{this.order=e,e.getAssociation("transactions").getList({page:1,limit:1}).then(e=>{const t=e.items[0].customFields.swag_paypal_transaction_id;this.SwagPayPalPaymentService.getPaymentDetails(this.order.id,t).then(e=>{this.paymentResource=e,this.setRelatedResources(),this.createDateTime=this.formatDate(this.paymentResource.create_time),this.updateDateTime=this.formatDate(this.paymentResource.update_time),this.currency=this.paymentResource.transactions[0].amount.currency,this.amount=this.paymentResource.transactions[0].amount,this.isLoading=!1}).catch(e=>{this.createNotificationError({title:this.$tc("swag-paypal-payment.paymentDetails.error.title"),message:e.message,autoClose:!1}),this.isLoading=!1})})})},formatDate(e){return this.dateFilter(e,{hour:"2-digit",minute:"2-digit",second:"2-digit"})},setRelatedResources(){this.paymentResource.transactions[0].related_resources.forEach(e=>{e.sale&&this.pushRelatedResource("sale",e.sale),e.authorization&&this.pushRelatedResource("authorization",e.authorization),e.order&&this.pushRelatedResource("order",e.order),e.refund&&this.pushRelatedResource("refund",e.refund),e.capture&&this.pushRelatedResource("capture",e.capture)})},pushRelatedResource(e,t){let a=null;const n=t.amount.currency;t.transaction_fee&&(a=`${t.transaction_fee.value} ${n}`),this.relatedResources.push({id:t.id,type:this.$tc(`swag-paypal-payment.transactionHistory.states.${e}`),total:`${t.amount.total} ${n}`,create:this.formatDate(t.create_time),update:this.formatDate(t.update_time),transactionFee:a,status:t.state,paymentMode:t.payment_mode})},resetDataAttributes(){this.paymentResource={},this.relatedResources=[],this.isLoading=!0,this.createDateTime="",this.updateDateTime="",this.currency="",this.amount={}}}});var te=a("pnTA"),ae=a("hQRr");const{Module:ne}=Shopware;ne.register("swag-paypal-payment",{type:"plugin",name:"SwagPayPal",title:"swag-paypal-payment.general.title",description:"swag-paypal-payment.general.descriptionTextModule",version:"1.0.0",targetVersion:"1.0.0",color:"#2b52ff",snippets:{"de-DE":te,"en-GB":ae},routeMiddleware(e,t){"sw.order.detail"===t.name&&t.children.push({component:"swag-paypal-payment-detail",name:"swag.paypal.payment.detail",isChildren:!0,path:"/sw/order/paypal/detail/:id"}),e(t)}});const se=Shopware.Classes.ApiService;var ie=class extends se{constructor(e,t,a="paypal"){super(e,t,a)}registerWebhook(e){const t=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}/webhook/register/${e}`,{},{headers:t}).then(e=>se.handleResponse(e))}};const re=Shopware.Classes.ApiService;var oe=class extends re{constructor(e,t,a="paypal"){super(e,t,a)}validateApiCredentials(e,t,a){const n=this.getBasicHeaders();return this.httpClient.get(`_action/${this.getApiBasePath()}/validate-api-credentials`,{params:{clientId:e,clientSecret:t,sandboxActive:a},headers:n}).then(e=>re.handleResponse(e))}getApiCredentials(e,t,a,n,s={},i={}){const r=s,o=this.getBasicHeaders(i);return this.httpClient.post(`_action/${this.getApiBasePath()}/get-api-credentials`,{authCode:e,sharedId:t,nonce:a,sandboxActive:n},{params:r,headers:o}).then(e=>re.handleResponse(e))}};const le=Shopware.Classes.ApiService;var ce=class extends le{constructor(e,t,a="paypal"){super(e,t,a)}getPaymentDetails(e,t){const a=`${this.getApiBasePath()}/payment-details/${e}/${t}`;return this.httpClient.get(a,{headers:this.getBasicHeaders()}).then(e=>le.handleResponse(e))}capturePayment(e,t,a,n,s,i){const r=`_action/${this.getApiBasePath()}/capture-payment/${t}/${a}/${e}`;return this.httpClient.post(r,{captureAmount:n,currency:s,captureIsFinal:i},{headers:this.getBasicHeaders()}).then(e=>le.handleResponse(e))}refundPayment(e,t,a,n,s){const i=`_action/${this.getApiBasePath()}/refund-payment/${t}/${a}/${e}`;return this.httpClient.post(i,{refundAmount:n,currency:s},{headers:this.getBasicHeaders()}).then(e=>le.handleResponse(e))}voidPayment(e,t,a){const n=`_action/${this.getApiBasePath()}/void-payment/${t}/${a}/${e}`;return this.httpClient.post(n,{},{headers:this.getBasicHeaders()}).then(e=>le.handleResponse(e))}};const{Application:de}=Shopware;de.addServiceProvider("SwagPayPalWebhookRegisterService",e=>{const t=de.getContainer("init");return new ie(t.httpClient,e.loginService)}),de.addServiceProvider("SwagPayPalApiCredentialsService",e=>{const t=de.getContainer("init");return new oe(t.httpClient,e.loginService)}),de.addServiceProvider("SwagPayPalPaymentService",e=>{const t=de.getContainer("init");return new ce(t.httpClient,e.loginService)});var pe=a("wpxW"),ue=a("+iaI");const{Application:me}=Shopware;me.addInitializerDecorator("locale",e=>(e.extend("de-DE",pe),e.extend("en-GB",ue),e))},ROb5:function(e,t){e.exports='{% block swag_paypal_frw_credentials %}\n    <div class="swag-paypal-frw">\n        <sw-loader v-if="isLoading"></sw-loader>\n\n        <p class="swag-paypal-frw__headerText">\n            {{ $tc(\'swag-paypal-frw-credentials.textIntroPayPal\') }}\n        </p>\n\n        <sw-switch-field :label="$tc(\'swag-paypal-frw-credentials.labelSandbox\')"\n                         v-model="config[\'SwagPayPal.settings.sandbox\']">\n        </sw-switch-field>\n\n        <div class="swag-paypal-frw__button-container">\n            <a class="sw-button sw-button--primary swag-paypal-frw__signup-button"\n               target="_blank"\n               data-paypal-onboard-complete="onboardedCallback"\n               :href="`${onBoardingUrl}`"\n               data-paypal-button="true">\n                {{ $tc(\'swag-paypal-frw-credentials.buttonGetCredentials\') }}\n            </a>\n\n            <div class="swag-paypal-frw__indicator">\n                <template v-if="fetchedSuccessful">\n                    <sw-icon name="small-default-checkmark-line-medium"\n                             class="swag-paypal-frw__icon-successful">\n                    </sw-icon>\n\n                    <span class="swag-paypal-frw__text-indicator">\n                        {{ $tc(\'swag-paypal-frw-credentials.textFetchedSuccessful\') }}\n                    </span>\n                </template>\n            </div>\n        </div>\n\n        <sw-collapse>\n            <template #header="{ expanded }">\n                <div class="swag-paypal-frw__collapse-header">\n                    <span class="swag-paypal-frw__collapse-header-title">\n                        {{ $tc(\'swag-paypal-frw-credentials.textSettingsHeader\') }}\n                    </span>\n\n                    <sw-icon v-if="expanded"\n                             key="filter-collapse-expanded-indicator"\n                             class="swag-paypal-frw__collapse-button"\n                             name="small-arrow-small-down">\n                    </sw-icon>\n                    <sw-icon v-else\n                             key="filter-collapse-expanded-indicator"\n                             class="swag-paypal-frw__collapse-button"\n                             name="small-arrow-small-right">\n                    </sw-icon>\n                </div>\n            </template>\n            <template #content>\n                <sw-text-field :label="$tc(\'swag-paypal-frw-credentials.labelClientId\')"\n                               @input="onCredentialsChanged"\n                               v-model="config[\'SwagPayPal.settings.clientId\']">\n                </sw-text-field>\n\n                <sw-text-field :label="$tc(\'swag-paypal-frw-credentials.labelClientSecret\')"\n                               @input="onCredentialsChanged"\n                               v-model="config[\'SwagPayPal.settings.clientSecret\']">\n                </sw-text-field>\n            </template>\n        </sw-collapse>\n    </div>\n{% endblock %}'},S35c:function(e,t){e.exports="{% block sw_plugin_list_grid_columns_actions_settings %}\n    <template v-if=\"item.composerName === 'swag/paypal'\">\n        <sw-context-menu-item :routerLink=\"{ name: 'swag.paypal.index' }\">\n            {{ $tc('sw-plugin.list.config') }}\n        </sw-context-menu-item>\n    </template>\n\n    <template v-else>\n        {% parent %}\n    </template>\n{% endblock %}"},"T0/x":function(e,t,a){var n=a("6uOG");"string"==typeof n&&(n=[[e.i,n,""]]),n.locals&&(e.exports=n.locals);(0,a("SZ7m").default)("544a4438",n,!0,{})},VVZb:function(e,t){e.exports="{% block sw_first_run_wizard_paypal_credentials %}\n    <swag-paypal-frw-credentials></swag-paypal-frw-credentials>\n{% endblock %}"},WObG:function(e,t){e.exports='{% block swag_paypal_payment_detail %}\n    <div class="swag-paypal-payment-detail">\n        <div v-if="!isLoading">\n            <sw-card :title="$tc(\'swag-paypal-payment.paymentDetails.cardTitle\')">\n                <template #grid>\n                    {% block swag_paypal_payment_actions_section %}\n                        <sw-card-section secondary\n                                         slim>\n                            <swag-paypal-payment-actions :orderId="order.id" :paymentResource="paymentResource">\n                            </swag-paypal-payment-actions>\n                        </sw-card-section>\n                    {% endblock %}\n                    <sw-card-section divider="top">\n                        <sw-container columns="1fr"\n                                      gap="0px 30px">\n                            {% block swag_paypal_payment_detail_invoice %}\n                                {% block swag_paypal_payment_detail_invoice_heading %}\n                                    <h3>\n                                        {{ $tc(\'swag-paypal-payment.paymentDetails.invoice.heading\') }}\n                                    </h3>\n                                {% endblock %}\n                                {% block swag_paypal_payment_detail_invoice_list %}\n                                    <sw-description-list class="swag-paypal-payment-detail__data">\n                                        <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.invoice.totalAmount\') }}</dt>\n                                        <dd>{{ amount.total }} {{ currency }}</dd>\n\n                                        <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.invoice.subTotal\') }}</dt>\n                                        <dd> {{ amount.details.subtotal }} {{ currency }}</dd>\n\n                                        <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.invoice.shipping\') }}</dt>\n                                        <dd> {{ amount.details.shipping }} {{ currency }}</dd>\n                                    </sw-description-list>\n                                {% endblock %}\n                                {% block swag_paypal_payment_detail_payment %}\n                                    {% block swag_paypal_payment_detail_payment_heading %}\n                                        <h3 class="swag-paypal-payment-detail__heading">\n                                            {{ $tc(\'swag-paypal-payment.paymentDetails.payment.heading\') }}\n                                        </h3>\n                                    {% endblock %}\n                                    {% block swag_paypal_payment_detail_payment_list %}\n                                        <sw-description-list class="swag-paypal-payment-detail__data">\n                                            <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.payment.intent\') }}</dt>\n                                            <dd>{{ $tc(`swag-paypal.settingForm.behaviour.intent.${paymentResource.intent}`) }}</dd>\n\n                                            <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.payment.paymentId\') }}</dt>\n                                            <dd>{{ paymentResource.id }}</dd>\n\n                                            <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.payment.cartId\') }}</dt>\n                                            <dd>{{ paymentResource.cart }}</dd>\n\n                                            <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.payment.state\') }}</dt>\n                                            <dd>{{ paymentResource.state }}</dd>\n\n                                            <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.payment.createTime\') }}</dt>\n                                            <dd>{{ createDateTime }}</dd>\n\n                                            <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.payment.updateTime\') }}</dt>\n                                            <dd>{{ updateDateTime }}</dd>\n                                        </sw-description-list>\n                                    {% endblock %}\n                                {% endblock %}\n                                {% block swag_paypal_payment_detail_customer %}\n                                    {% block swag_paypal_payment_detail_customer_heading %}\n                                        <h3 class="swag-paypal-payment-detail__heading">\n                                            {{ $tc(\'swag-paypal-payment.paymentDetails.customer.heading\') }}\n                                        </h3>\n                                    {% endblock %}\n                                    {% block swag_paypal_payment_detail_customer_list %}\n                                        <sw-description-list class="swag-paypal-payment-detail__data">\n                                            <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.customer.payerId\') }}</dt>\n                                            <dd>{{ paymentResource.payer.payer_info.payer_id }}</dd>\n                                        </sw-description-list>\n                                    {% endblock %}\n                                {% endblock %}\n                            {% endblock %}\n                        </sw-container>\n                    </sw-card-section>\n                </template>\n            </sw-card>\n            {% block swag_paypal_payment_transaction_history_card %}\n                <sw-card :title="$tc(\'swag-paypal-payment.transactionHistory.cardTitle\')">\n                    <template #grid>\n                        {% block swag_paypal_payment_transaction_history_grid %}\n                            <sw-data-grid :dataSource="relatedResources"\n                                          :columns="relatedResourceColumns"\n                                          :showActions="false"\n                                          :showSelection="false">\n                            </sw-data-grid>\n                        {% endblock %}\n                    </template>\n                </sw-card>\n            {% endblock %}\n        </div>\n        <sw-loader v-if="isLoading">\n        </sw-loader>\n    </div>\n{% endblock %}'},WsQt:function(e,t){e.exports='{% block swag_paypal_paymemnt_action_void %}\n    <sw-modal variant="small"\n              :title="$tc(`swag-paypal-payment.modal.title.void`)"\n              @modal-close="closeModal">\n        {% block swag_paypal_paymemnt_action_void_headline %}\n            <p>{{ $tc(\'swag-paypal-payment.voidAction.confirm.message\') }}</p>\n        {% endblock %}\n        <template #modal-footer>\n            {% block swag_paypal_paymemnt_action_void_cancel_button %}\n                <sw-button @click="closeModal">\n                    {{ $tc(\'swag-paypal-payment.voidAction.confirm.button.cancel\') }}\n                </sw-button>\n            {% endblock %}\n            {% block swag_paypal_paymemnt_action_void_confirm_button %}\n                <sw-button variant="primary"\n                           @click="voidPayment">\n                    {{ $tc(\'swag-paypal-payment.voidAction.confirm.button.confirm\') }}\n                </sw-button>\n            {% endblock %}\n        </template>\n        <sw-loader v-if="isLoading"></sw-loader>\n    </sw-modal>\n{% endblock %}\n'},XB45:function(e,t){e.exports='{% block swag_paypal %}\n    <sw-page class="swag-paypal">\n        {% block swag_paypal_header %}\n            <template #smart-bar-header>\n                <h2>\n                    {{ $tc(\'sw-settings.index.title\') }}\n                    <sw-icon name="small-arrow-medium-right" small></sw-icon>\n                    {{ $tc(\'swag-paypal.header\') }}\n                </h2>\n            </template>\n        {% endblock %}\n\n        {% block swag_paypal_actions %}\n            <template #smart-bar-actions>\n                {% block swag_paypal_actions_test %}\n                    <sw-button @click="onTest"\n                               :disabled="isLoading || !clientSecretFilled || !clientIdFilled">\n                        {{ $tc(\'swag-paypal.settingForm.test\') }}\n                    </sw-button>\n                {% endblock %}\n\n                {% block swag_paypal_actions_save %}\n                    <sw-button-process\n                            class="sw-settings-login-registration__save-action"\n                            :isLoading="isLoading"\n                            :processSuccess="isSaveSuccessful"\n                            :disabled="isLoading"\n                            variant="primary"\n                            @process-finish="saveFinish"\n                            @click="onSave">\n                        {{ $tc(\'swag-paypal.settingForm.save\') }}\n                    </sw-button-process>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        {% block swag_paypal_content %}\n            <template #content>\n                <sw-card-view>\n                    <sw-system-config\n                            ref="systemConfig"\n                            salesChannelSwitchable\n                            inherit\n                            @config-changed="onConfigChange"\n                            domain="SwagPayPal.settings">\n                        <template #card-element="{ element, config }">\n                            <sw-form-field-renderer v-bind="getBind(element, config)"\n                                                    v-model="config[element.name]">\n                            </sw-form-field-renderer>\n                        </template>\n                    </sw-system-config>\n                </sw-card-view>\n            </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}\n'},bL4Y:function(e){e.exports=JSON.parse('{"swag-paypal":{"header":"PayPal","general":{"mainMenuItemGeneral":"PayPal","descriptionTextModule":"PayPal settings"},"messageNotBlank":"This value should not be blank.","settingForm":{"save":"Save","test":"Test API credentials","credentials":{"cardTitle":"API credentials","clientId":{"label":"Client ID","tooltipText":"The REST API client ID is used to authenticate this plugin with the PayPal API."},"clientSecret":{"label":"Client secret","tooltipText":"The REST API client secret is used to authenticate this plugin with the PayPal API."},"sandbox":{"label":"Enable sandbox","tooltipText":"Enable if you want to test the PayPal integration."}},"behaviour":{"cardTitle":"Behaviour","intent":{"label":"Payment acquisition","sale":"Complete payment immediately (Sale)","authorize":"Delayed payment collection (Auth-Capture)","order":"Delayed payment collection (Order-Auth-Capture)"},"submitCart":{"label":"Submit cart","helpText":"If this option is active, cart data will be submitted to PayPal at checkout."},"brandName":{"label":"Your own brand name on PayPal page","tooltipText":"This text will be displayed as the brand name on the PayPal payment page."},"landingPage":{"label":"PayPal landing page","helpText":{"Login":"Login: The PayPal site displays a login screen as landing page.","Billing":"Registration: The PayPal site displays a registration form as landing page."},"options":{"Login":"Login","Billing":"Registration"}},"sendOrderNumber":{"label":"Submit order number","helpText":"If this option is active, the order number will be submitted to PayPal at checkout."},"orderNumberPrefix":{"label":"Order number prefix","tooltipText":"This text is placed before the original order number (e.g MyShop_SW20001). This helps to identify the shop where the payment was made."}},"plus":{"plusOverwritePaymentName":"PayPal, direct debit or credit card","plusExtendPaymentDescription":"Payment by direct debit or credit card is possible without PayPal account."},"titleSuccess":"Success","titleError":"Error","messageSaveSuccess":"The PayPal settings have been saved.","messageTestSuccess":"The API credentials have been validated.","messageTestError":"The API credentials could not be validated.","messageWebhookCreated":"The webhook has been registered.","messageWebhookUpdated":"The webhook has been updated.","messageWebhookError":"The webhook could not be saved. The following errors occurred:"}}}')},hQRr:function(e){e.exports=JSON.parse('{"swag-paypal-payment":{"general":{"title":"Orders"},"tabs":{"overview":"Overview"},"paymentDetails":{"cardTitle":"Payment","invoice":{"heading":"Invoice amount","totalAmount":"Total amount:","subTotal":"Subtotal:","shipping":"Shipping:"},"payment":{"heading":"Payment details","intent":"Intent:","paymentId":"Payment ID:","cartId":"Cart ID:","state":"State:","createTime":"Create time:","updateTime":"Update time:"},"customer":{"heading":"Customer","payerId":"Payer ID:"},"error":{"title":"Error fetching payment details from PayPal"}},"transactionHistory":{"cardTitle":"Payment History","states":{"authorization":"Authorization","sale":"Sale","refund":"Refund","capture":"Capture","order":"Order"},"types":{"type":"Type","amount":"Amount","createTime":"Created","updateTime":"Updated","state":"State","trackingId":"Tracking ID","transactionFee":"Transaction fee","paymentMode":"Payment mode"}},"buttons":{"label":{"refund":"Create a new refund","capture":"Authorize","void":"Cancel authorization"}},"modal":{"title":{"refund":"New refund","capture":"Authorize","void":"Cancel authorization"}},"refundAction":{"successTitle":"Success","successMessage":"Your refund was successful.","invoiceSelect":{"label":"Select capture"},"refundAmount":{"label":"Amount"},"confirmButton":{"text":"Execute"}},"captureAction":{"successTitle":"Success","successMessage":"Your capture was successful.","maxAmount":"Maximum amount","currentAmount":"Amount","isFinal":"This is final capture","button":{"text":"Capture payment"}},"voidAction":{"successTitle":"Success","successMessage":"The payment was successfully voided.","confirm":{"message":"Do you really want to cancel this payment?","button":{"confirm":"Cancel authorization","cancel":"No"}}}}}')},pnTA:function(e){e.exports=JSON.parse('{"swag-paypal-payment":{"general":{"title":"Bestellungen"},"tabs":{"overview":"Übersicht"},"paymentDetails":{"cardTitle":"Zahlung","invoice":{"heading":"Rechnungsbetrag","totalAmount":"Gesamtbetrag:","subTotal":"Zwischensumme:","shipping":"Versandkosten:"},"payment":{"heading":"Zahlungsdetails","intent":"Zahlungsabschluss:","paymentId":"Zahlungs-ID:","cartId":"Warenkorb-ID:","state":"Status:","createTime":"Erstellt:","updateTime":"Zul. aktualisiert:"},"customer":{"heading":"Kunde","payerId":"Kunden-ID:"},"error":{"title":"Fehler beim Abrufen der Zahlungsdaten von PayPal"}},"transactionHistory":{"cardTitle":"Zahlungsverlauf","states":{"authorization":"Autorisierung","sale":"Verkauf","refund":"Rückerstattung","capture":"Einzug","order":"Bestellung"},"types":{"type":"Typ","amount":"Betrag","createTime":"Erstellt","updateTime":"Aktualisiert","state":"Status","trackingId":"Tracking-ID","transactionFee":"Aufschlag","paymentMode":"Zahlungsmodus"}},"buttons":{"label":{"refund":"Rückerstattung","capture":"Autorisieren","void":"Autorisierung abbrechen"}},"modal":{"title":{"refund":"Rückerstattung","capture":"Zahlung einziehen","void":"Autorisierung abbrechen"}},"refundAction":{"successTitle":"Erfolg","successMessage":"Die Rückerstattung war erfolgreich.","invoiceSelect":{"label":"Einzug wählen"},"refundAmount":{"label":"Betrag"},"confirmButton":{"text":"Ausführen"}},"captureAction":{"successTitle":"Erfolg","successMessage":"Die Autorisierung war erfolgreich.","maxAmount":"Maximalbetrag","currentAmount":"Betrag","isFinal":"Kein erneuter Einzug möglich","button":{"text":"Zahlung einziehen"}},"voidAction":{"successTitle":"Erfolg","successMessage":"Die Autorisierung wurde erfolgreich abgebrochen.","confirm":{"message":"Möchtest du diese Zahlung wirklich abbrechen?","button":{"confirm":"Autorisierung abbrechen","cancel":"Nein"}}}}}')},qp5Y:function(e){e.exports=JSON.parse('{"swag-paypal":{"header":"PayPal","general":{"mainMenuItemGeneral":"PayPal","descriptionTextModule":"Einstellungen für PayPal"},"messageNotBlank":"Dieser Wert darf nicht leer sein.","settingForm":{"save":"Speichern","test":"API-Zugangsdaten testen","credentials":{"cardTitle":"API-Zugangsdaten","clientId":{"label":"Client-ID","tooltipText":"Die REST-API Client-ID, die das Plugin dazu verwendet, sich mit der PayPal-API zu authentifizieren."},"clientSecret":{"label":"Client-Secret","tooltipText":"Das REST-API Client-Secret, das das Plugin dazu verwendet, sich mit der PayPal-API zu authentifizieren."},"sandbox":{"label":"Sandbox aktivieren","tooltipText":"Aktiviere diese Option, um die Integration zu testen."}},"behaviour":{"cardTitle":"Verhalten","intent":{"label":"Zahlungsabschluss","sale":"Zahlung sofort abschließen (Sale)","authorize":"Zeitverzögerter Zahlungseinzug (Auth-Capture)","order":"Zeitverzögerter Zahlungseinzug (Order-Auth-Capture)"},"submitCart":{"label":"Warenkorb übertragen","helpText":"Wenn diese Option aktiv ist, werden beim Checkout die Warenkorbdaten an PayPal übertragen."},"brandName":{"label":"Eigener Markenname auf der PayPal-Seite","tooltipText":"Dieser Text wird als Markenname auf der PayPal-Zahlungsseite angezeigt."},"landingPage":{"label":"PayPal-Landingpage","helpText":{"Login":"Anmeldung: Auf der PayPal-Seite wird der Login als Landingpage angezeigt.","Billing":"Registrierung: Auf der PayPal-Seite wird die Registrierung als Landingpage angezeigt."},"options":{"Login":"Anmeldung","Billing":"Registrierung"}},"sendOrderNumber":{"label":"Bestellnummer übertragen","helpText":"Wenn diese Option aktiv ist, wird beim Checkout die Bestellnummer an PayPal übertragen."},"orderNumberPrefix":{"label":"Bestellnummer-Präfix","tooltipText":"Dieser Text wird vor die ursprüngliche Bestellnummer gehängt (z.B. MeinShop_SW20001). Das hilft dabei der Identifizierung des Shops, in dem die Zahlung ausgeführt wurde."}},"plus":{"plusOverwritePaymentName":"PayPal, Lastschrift oder Kreditkarte","plusExtendPaymentDescription":"Zahlung per Lastschrift oder Kreditkarte ist auch ohne PayPal-Konto möglich."},"titleSuccess":"Erfolg","titleError":"Fehler","messageSaveSuccess":"Die PayPal-Einstellungen wurden gespeichert.","messageTestSuccess":"Die API-Zugangsdaten wurden validiert.","messageTestError":"Die API-Zugangsdaten konnten nicht validiert werden.","messageWebhookCreated":"Der Webhook wurde registriert.","messageWebhookUpdated":"Der Webhook wurde aktualisiert.","messageWebhookError":"Der Webhook konnte nicht gespeichert werden. Folgende Fehler sind aufgetreten:"}}}')},s5le:function(e,t){e.exports='{% block sw_settings_content_card_slot_plugins %}\n    {% parent %}\n\n    <sw-settings-item :label="$tc(\'swag-paypal.general.mainMenuItemGeneral\')"\n                      :to="{ name: \'swag.paypal.index\' }"\n                      :backgroundEnabled="false">\n        <template #icon>\n            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="40" viewBox="0 0 48 48" class="sw-settings-index__paypal-icon">\n                <g fill="none" fill-rule="evenodd">\n                    <path fill="#013088" d="M1.36196923,45.9634625 C0.525969231,45.9634625 -0.113723077,45.2159 0.0165846154,44.3907125 L6.62843077,2.599775 C6.80104615,1.4978375 7.75381538,0.6878375 8.87073846,0.6878375 L24.7445846,0.6878375 C30.2124308,0.6878375 34.4855077,1.8387125 36.8530462,4.5269 C39.0005846,6.9687125 39.6284308,9.6653375 39.0056615,13.6259 C39.8924308,14.0946875 40.6522769,14.670125 41.2648923,15.3636875 C43.2888923,17.66375 43.6848923,20.934125 42.9199692,24.8508125 C41.0888923,34.2265625 34.8239692,37.4665625 26.8210462,37.4665625 L25.5856615,37.4665625 C24.6075077,37.4665625 23.7748923,38.1753125 23.6225846,39.1405625 L23.5227385,39.6805625 L21.9675077,49.5220625 L21.8862769,49.9405625 C21.7322769,50.9024375 20.9013538,51.6111875 19.9232,51.6111875 L11.6630462,51.6111875 C10.9319692,51.6111875 10.3735077,50.9598125 10.4868923,50.2375625 L11.1620698,45.9634625 L1.36196923,45.9634625 Z"/>\n                    <path fill="#019CDE" d="M39.0039692,13.6255625 C38.9565846,13.927625 38.9024308,14.2364375 38.8415077,14.5536875 C36.7481231,25.271 29.5862769,28.973375 20.4393538,28.973375 L15.7821231,28.973375 C14.6635077,28.973375 13.7208923,29.783375 13.5465846,30.883625 L11.1621231,45.963125 L10.4868923,50.2375625 C10.3735077,50.9598125 10.9319692,51.6111875 11.6630462,51.6111875 L19.9232,51.6111875 C20.9013538,51.6111875 21.7322769,50.9024375 21.8862769,49.9405625 L21.9675077,49.5220625 L23.5227385,39.6805625 L23.6225846,39.1405625 C23.7748923,38.1753125 24.6075077,37.4665625 25.5856615,37.4665625 L26.8210462,37.4665625 C34.8239692,37.4665625 41.0888923,34.2265625 42.9199692,24.8508125 C43.6848923,20.934125 43.2888923,17.66375 41.2648923,15.3636875 C40.6522769,14.670125 39.8924308,14.0946875 39.0039692,13.6255625"/>\n                    <path fill="#012269" d="M36.8142923,12.7546437 C36.4944462,12.6618312 36.1644462,12.5774562 35.8259846,12.5015187 C35.4858308,12.4272687 35.1372154,12.3614562 34.7784462,12.3040812 C33.5227538,12.1015812 32.1469077,12.0053937 30.6729077,12.0053937 L18.2310615,12.0053937 C17.9247538,12.0053937 17.6336769,12.0745812 17.3730615,12.1994562 C16.7993692,12.4745187 16.3729077,13.0162062 16.2696769,13.6793937 L13.6229077,30.3957687 L13.5467538,30.8834562 C13.7210615,29.7832062 14.6636769,28.9732062 15.7822923,28.9732062 L20.4395231,28.9732062 C29.5864462,28.9732062 36.7482923,25.2691437 38.8416769,14.5535187 C38.9042923,14.2362687 38.9567538,13.9274562 39.0041385,13.6253937 C38.4744462,13.3452687 37.9007538,13.1056437 37.2830615,12.9014562 C37.1307538,12.8508312 36.9733692,12.8018937 36.8142923,12.7546437"/>\n                </g>\n            </svg>\n        </template>\n    </sw-settings-item>\n{% endblock %}\n'},wT0C:function(e,t,a){},wpxW:function(e){e.exports=JSON.parse('{"swag-paypal-frw-credentials":{"buttonGetCredentials":"Hole API Zugangsdaten","textIntroPayPal":"Um PayPal zu nutzen müssen nur die API Zugangsdaten eingegeben werden.","labelClientId":"Client-ID","labelClientSecret":"Client-Secret","labelSandbox":"Sandbox","textSettingsHeader":"Erweiterte Einstellungen","messageFetchedError":" Bitte versuche es erneut oder nutze die erweiterten Einstellungen um die Zugangsdaten direkt einzugeben.","titleFetchedError":"Es ist ein Fehler aufgetreten","textFetchedSuccessful":"Die Zugangsdaten wurden erfolgreich abgerufen.","titleNoCredentials":"Fehler","messageNoCredentials":"Es wurden keine Zugangsdaten hinterlegt.","titleTestSuccess":"Erfolgreich","messageTestSuccess":"Die Zugangsdaten sind gültig.","titleTestError":"Fehler"}}')},y1GL:function(e,t,a){var n=a("/tld");"string"==typeof n&&(n=[[e.i,n,""]]),n.locals&&(e.exports=n.locals);(0,a("SZ7m").default)("a7139128",n,!0,{})}},[["Qret","runtime","vendors-node"]]]);